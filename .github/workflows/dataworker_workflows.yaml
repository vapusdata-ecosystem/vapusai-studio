name: DATA dataworker service workflows

on:
  # push:
  #   paths:
  #     - 'app/src/dataworker/**'
  workflow_call:
    inputs:
      oci-registry:
        required: true
        type: string
      tag:
        required: true
        type: string
    secrets:
      oci-username:
        required: true
      oci-password:
        required: true
      signing-key:
        required: true
      signing-password:
        required: true
jobs:
  # dataworker-pre-build:
  #   name: Pre release checks for dataworker service like lint, and sec checks
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.23

  #     - name: Install Golangci-lint
  #       working-directory: app/src/dataworker
  #       run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.42.1
      
  #     - name : Install go sec
  #       uses: securego/gosec@master

  #     - name: Lint for internals package
  #       continue-on-error: true # To Be Removed
  #       working-directory: internals
  #       run: |
  #         go mod tidy
  #         go mod vendor
  #         golangci-lint run --out-format checkstyle:/tmp/internals-lint-reports.json
  #     - name: Sec check for internals package
  #       continue-on-error: true # To Be Removed
  #       working-directory: internals
  #       run: |
  #         go mod tidy
  #         go mod vendor
  #         gosec -fmt=json -out=/tmp/internals-sec-reports.json ./...
  #     - name: Lint check for dataworker service
  #       continue-on-error: true # To Be Removed
  #       working-directory: app/src/dataworker
  #       run: |
  #         golangci-lint run --out-format checkstyle:/tmp/dataworker-lint-reports.json
  #     - name: Sec check for dataworker service
  #       continue-on-error: true # To Be Removed
  #       working-directory: app/src/dataworker
  #       run: |
  #         gosec -fmt=json -out=/tmp/dataworker-sec-reports.json ./... 
  #     - name: Uploading pre-release output as artifacts
  #       id: upload-artifacts-golang
  #       uses: actions/upload-artifact@v4.3.6
  #       with:
  #         name: dataworker-pre-release-artifacts
  #         path: /tmp/*-reports*  
  dataworker-svc-release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Build and Release dataworker service
    runs-on: ubuntu-latest
    permissions:
      contents: write # required for goreleaser to upload the release assets
      packages: write # to push worker images
      pull-requests: write
      id-token: write
      attestations: write
    env:
      SIGNING_KEY: ${{ secrets.signing-key }}
      SIGNING_PASSWORD: ${{ secrets.signing-password }}
      OCI_REGISTRY: ${{ inputs.oci-registry }}
      OCI_USERNAME: ${{ secrets.oci-username }}
      OCI_PASSWORD: ${{ secrets.oci-password }}
      OCI_IMAGE: /vapusdata-ecosystem/dataworker
      ARTIFACT_PREFIX: dataworker
    steps:      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        
      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.9.0
        with:
          syft-version: 'v1.17.0'
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: 'v2.4.1'

      - name: Check cosign install!
        run: cosign version

      - name: Extract env vars
        id: extract_env_vars
        run: |
          echo "TAG_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "GIT_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
          
      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1
      
      - name: Generate code with Buf
        working-directory: apis
        run: buf generate

      - name: Log in to Google Artifact Registry
        run: |
          docker login -u "${{ env.OCI_USERNAME }}" --password "${{ env.OCI_PASSWORD }}" "${{ env.OCI_REGISTRY }}"

      - name: Release Golang Services
        uses: goreleaser/goreleaser-action@v6.1.0
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: '~> v2'
          workdir: app/src/dataworker
          args: release --clean  --skip=validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CONTAINER_REGISTRY: ${{ env.OCI_REGISTRY }}
          TAG: ${{ env.TAG_NAME }}
          COMMIT_TAG: ${{ env.GIT_COMMIT }}
          OCI_IMAGE: ${{ env.OCI_IMAGE }}

      - name: Get OCI Artifact Digest and files
        id: get-digest
        run: |
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "${{ env.OCI_REGISTRY }}${{ env.OCI_IMAGE }}:${{ env.TAG_NAME }}" | awk -F '@' '{print $2}')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "$DIGEST" > dataworker-digest.txt
           echo "${{ env.TAG_NAME }}" > dataworker-tag.txt

      - name: Generate cyclonedx SBOMs for dataworker OCI image {{ env.TAG_NAME }}
        uses: anchore/sbom-action@v0.16.0
        with:
          image: ${{ env.OCI_REGISTRY }}${{ env.OCI_IMAGE }}:${{ env.TAG_NAME }}
          format: cyclonedx-json
          artifact-name: ${{ env.ARTIFACT_PREFIX }}-${{ env.TAG_NAME }}.cyclonedx.json
          output-file: /tmp/sbom.${{ env.ARTIFACT_PREFIX }}.cyclonedx.json
          upload-artifact: false

      - name: Uploading SBOMs
        id: upload-artifacts-golang
        uses: actions/upload-artifact@v4.3.6
        with:
          name: dataworker-SBOM-artifacts
          path: /tmp/sbom*  

      - name: Sign OCI Image 
        env:
          COSIGN_KEY: ${{ env.SIGNING_KEY }}
          COSIGN_PASSWORD: ${{ env.SIGNING_PASSWORD }}
        run: |
          cosign sign --key env://COSIGN_KEY --upload=true ${{ env.OCI_REGISTRY }}${{ env.OCI_IMAGE }}@${{ steps.get-digest.outputs.digest }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: dataworker-digest-artifacts
          path: dataworker-digest.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v4.3.6
        with:
          name: dataworker-tag-artifacts
          path: dataworker-tag.txt
      # # Move this to raise MR alon with signing the artifacts
      # - name: Updating dataworker Version in Helm Chart
      #   working-directory: scripts/goscripts
      #   run: |
      #     go mod tidy
      #     echo "digest = ${{ env.digest }}"
      #     go run main.go --helm-registry ${{ env.OCI_REGISTRY }}/vapusdata-ecosystem --helm-registry-username ${{ secrets.GAR_DEV_USERNAME }} --helm-registry-password=${{ secrets.VAPUS_BETA_GAR_PASS }} --dataworker-svc-digest=${{ env.digest }} --dataworker-svc-tag=${{ env.TAG_NAME }} --appVersion=${{ env.TAG_NAME }}  --bump-version=false
      # - name: Update Helm Chart with new dataworker version
      #   uses: apusdata-ecosystem/vapusdata/.github/workflows/build_helmchart_workflows.yaml@main
      #   with:
      #     dataworker-oci-digest: ${{ env.digest }}
      #     dataworker-oci-tag: ${{ env.TAG_NAME }}
      #     commit-message: |
      #       Bumping dataworker Version ${{ env.TAG_NAME }} 
      #       for new release based on the code changes done in DATA containers pushed to the ${{ env.TAG_NAME }} tag
      #     signoff: true
      #     base: main
      #     title: Bump dataworker Version => ${{ env.TAG_NAME }}
      #     body: |
      #       New dataworker release is available.... \n Bumping dataworker reference to ${{ env.TAG_NAME }}
      #     labels: |
      #       automated
      #       helm update
      - uses: actions/attest-build-provenance/predicate@9ff3713ef183e028b07415e8a740b634c054a663 # predicate@1.1.1
        id: generate-build-provenance-predicate
        name: Generate build provenance predicate

      - name: Etldataworker attestation
        uses: actions/attest-build-provenance@v1
        id: dataworker-attestation
        with:
          subject-name: ${{ env.OCI_REGISTRY }}${{ env.OCI_IMAGE }}
          subject-digest: ${{ steps.get-digest.outputs.digest }}
          push-to-registry: true
          predicate-type: ${{ steps.generate-build-provenance-predicate.outputs.predicate-type }}
          predicate: ${{ steps.generate-build-provenance-predicate.outputs.predicate }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          show-summary: true
          # subject-path: |
          #   ${{ env.OCI_REGISTRY }}/${{ env.OCI_IMAGE }}:${{ env.TAG_NAME }}
          #   /tmp/sbom.${{ env.ARTIFACT_PREFIX }}.cyclonedx.json
          #   /dist-bin/*
    