name: vapusctl cli workflows

on:
  # push:
  #   paths:
  #     - 'app/src/cli/**'
  workflow_call:
    inputs:
      oci-registry:
        required: true
        type: string
      tag:
        required: true
        type: string
      pub-operator-repo:
        required: true
        type: string
    secrets:
      oci-username:
        required: true
      oci-password:
        required: true
      signing-key:
        required: true
      signing-password:
        required: true
      pub-operator-repo-pat:
        required: true
jobs:
  # vapusctl-pre-release:
  #   name: Pre release checks for vapusctl like lint, and sec checks
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.23

  #     - name: Install Golangci-lint
  #       working-directory: app/src/cli
  #       run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.42.1
      
  #     - name : Install go sec
  #       uses: securego/gosec@v2.20.0

  #     - name: Lint for internals package
  #       continue-on-error: true # To Be Removed
  #       working-directory: internals
  #       run: |
  #         go mod tidy
  #         go mod vendor
  #         golangci-lint run --out-format checkstyle:/tmp/internals-lint-reports.json
  #     - name: Sec check for internals package
  #       continue-on-error: true # To Be Removed
  #       working-directory: internals
  #       run: |
  #         go mod tidy
  #         go mod vendor
  #         gosec -fmt=json -out=/tmp/internals-sec-reports.json ./...
  #     - name: Lint check for vapusctl service
  #       continue-on-error: true # To Be Removed
  #       working-directory: app/src/cli
  #       run: |
  #         golangci-lint run --out-format checkstyle:/tmp/vapusctl-lint-reports.json
  #     - name: Sec check for vapusctl service
  #       continue-on-error: true # To Be Removed
  #       working-directory: app/src/cli
  #       run: |
  #         gosec -fmt=json -out=/tmp/vapusctl-sec-reports.json ./... 
  #     - name: Uploading pre-release output as artifacts
  #       id: upload-artifacts-golang
  #       uses: actions/upload-artifact@v4.3.6
  #       with:
  #         name: vapusctl-pre-release-artifacts
  #         path: /tmp/*-reports*  
  vapusctl-release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Build and Release vapusctl service
    runs-on: ubuntu-latest
    permissions:
      contents: write # required for goreleaser to upload the release assets
      packages: write # to push worker images
      pull-requests: write
      id-token: write
      attestations: write
      security-events: write
    env:
      SIGNING_KEY: ${{ secrets.signing-key }}
      SIGNING_PASSWORD: ${{ secrets.signing-password }}
      OCI_REGISTRY: ${{ inputs.oci-registry }}
      OCI_USERNAME: ${{ secrets.oci-username }}
      OCI_PASSWORD: ${{ secrets.oci-password }}
      OCI_IMAGE: /vapusdata-ecosystem/vapusctl
      ARTIFACT_PREFIX: vapusctl
      PUB_OPERATOR_REPO: ${{ inputs.pub-operator-repo }}
      PUB_OPERATOR_PACKAGE_PAT: ${{ secrets.pub-operator-repo-pat }}
    steps:      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.23

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0
        
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: Check cosign install!
        run: cosign version

      - name: Extract env vars
        id: extract_env_vars
        run: |
          echo "TAG_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "GIT_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV
          
      - name: Install Buf
        uses: bufbuild/buf-setup-action@v1

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.9.0
        with:
          syft-version: 'v1.17.0'
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: 'v2.4.1'
      - name: Check Cosign install!
        run: cosign version

      - name: Generate code with Buf
        working-directory: apis
        run: buf generate

      - name: Release Golang Services
        uses:  goreleaser/goreleaser-action@v6.1.0
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: '~> v2'
          workdir: app/src/cli
          args: release --clean  --skip=validate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CONTAINER_REGISTRY: ${{ env.OCI_REGISTRY }}
          TAG: ${{ env.TAG_NAME }}
          COMMIT_TAG: ${{ env.GIT_COMMIT }}
          OCI_IMAGE: ${{ env.OCI_IMAGE }}
          COSIGN_KEY: ${{ env.SIGNING_KEY }}
          COSIGN_PASSWORD: ${{ env.SIGNING_PASSWORD }}

      # - name: Authenticate to Vapus Operator Repo
      #   run: echo "${{ secrets.PUB_OPERATOR_PACKAGE_PAT }}" | gh auth login --with-token

      # - name: Create Release in Vapus Operator Repo
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.PUB_OPERATOR_PACKAGE_PAT }}
      #   with:
      #     repository: <your-username>/<public-repo>
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: false
      #     prerelease: false
      - name: Upload All Files to Vapus Operator Repo
        run: |
          echo "${{ env.PUB_OPERATOR_PACKAGE_PAT }}" | gh auth login --with-token
          gh release create ${{ env.TAG_NAME }} --repo ${{ env.PUB_OPERATOR_REPO }} --generate-notes
          gh release upload ${{ env.TAG_NAME }} app/src/cli/dist-bin/* --repo ${{ env.PUB_OPERATOR_REPO }} --clobber

      # Step 3: Upload Files Matching Wildcard
      # - name: Upload VapucCtl Release Assets
      #   with:
      #     workdir: app/src/cli
      #   run: |
      #     for file in /dist-bin/*; do
      #       echo "Uploading $file to release ${{ github.event.release.tag_name }}..."
      #       gh release upload "${{ github.event.release.tag_name }}" "$file" --repo "${{ github.repository }}" --clobber
      #     done