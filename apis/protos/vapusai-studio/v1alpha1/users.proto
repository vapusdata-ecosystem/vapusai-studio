/**
 * @fileoverview
 * This file contains the protocol buffer definitions for the User API.
 * The User API allows users to create and manage Users
 * multiple sources.
 *
 * @packageDocumentation
 */

syntax = "proto3";

import "google/api/annotations.proto";
// import "buf/validate/validate.proto";
import "protos/models/v1alpha1/common.proto";
import "protos/models/v1alpha1/users.proto";
import "protos/models/v1alpha1/enums.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

package vapusai.v1alpha1;

option go_package = "github.com/vapusdata-oss/apis/protos/vapusai/v1alpha1";

/**
 * The UserManagementService is the service interface for managing users across vapusai services.
 */
service UserManagementService {

    /**
     * Generates a access token for the given user.
     * @param {AccessTokenInterfaceRequest} request - The request object.
     * @returns {AccessTokenResponse} The response object.
     */
    rpc AccessTokenInterface(AccessTokenInterfaceRequest) returns (AccessTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1alpha1/auth/token"
            body: "*"
        };
    }

    rpc RegisterUser(RegisterUserRequest) returns (AccessTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1alpha1/register"
            body: "*"
        };
    }

    /**
     * Manages user operations.
     * @param {UserManagerRequest} request - The request object.
     * @returns {UserResponse} The response object.
     */
    rpc UserManager(UserManagerRequest) returns (UserResponse) {
        option (google.api.http) = {
            post: "/api/v1alpha1/Studio/users"
            body: "*"
        };
    }

    rpc RefreshTokenManager(RefreshTokenManagerRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1alpha1/Studio/refresh-token"
            body: "*"
        };
    }

    rpc RefreshTokenGetter(RefreshTokenGetterRequest) returns (RefreshTokenResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/Studio/refresh-token"
        };
    }

    /**
     * Retrieves user information.
     * @param {UserGetterRequest} request - The request object.
     * @returns {UserResponse} The response object.
     */
    rpc UserGetter(UserGetterRequest) returns (UserResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/Studio/users/{user_id}"
        };
    }

    /**
     * Manages authorization operations.
     * @param {AuthzManagerRequest} request - The request object.
     * @returns {AuthzResponse} The response object.
     */
    rpc AuthzManager(AuthzManagerRequest) returns (AuthzResponse) {
        option (google.api.http) = {
            post: "/api/v1alpha1/Studio/authz"
            body: "*"
        };
    }

    /**
     * Retrieves authorization information.
     * @param {AuthzGetterRequest} request - The request object.
     * @returns {AuthzResponse} The response object.
     */
    rpc AuthzGetter(AuthzGetterRequest) returns (AuthzResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/Studio/authz"
        };
    }

    /**
     * Handles login requests.
     * @param {models.v1alpha1.EmptyRequest} request - The request object.
     * @returns {LoginHandlerResponse} The response object.
     */
    rpc LoginHandler(models.v1alpha1.EmptyRequest) returns (LoginHandlerResponse) {
        option (google.api.http) = {
            get: "/api/v1alpha1/Studio/login"
        };
    }

    /**
     * Handles login callbacks.
     * @param {LoginCallBackRequest} request - The request object.
     * @returns {AccessTokenResponse} The response object.
     */
    rpc LoginCallback(LoginCallBackRequest) returns (AccessTokenResponse) {
        option (google.api.http) = {
            post: "/api/v1alpha1/Studio/login/callback"
            body: "*"
        };
    }
}

enum UserAgentActions {
    INVALID_USER_OPERATION = 0;
    INVITE_USERS = 1;
    SELF_SIGNUP = 2;
    REMOVE_USER = 3;
    PATCH_USER = 4;
}

enum UserGetterActions {
    GET_USER = 0;
    LIST_USERS = 1;
    LIST_STUDIO_USERS = 2;
}

enum AuthzAgentActions {
    INVALID_AUTHZ_OPERATION = 0;
    LIST_ROLES = 1;
    LIST_ACTIONS = 3;
    ADD_ROLE = 4;
    MODIFY_ROLE = 5;
    REMOVE_ROLE = 6;
    ADD_MARKETPLACE_ROLE = 2;
    MODIFY_MARKETPLACE_ROLE = 7;
    REMOVE_MARKETPLACE_ROLE = 8;   
}

message LoginHandlerResponse {
    string login_url = 1; // @gotags: yaml:"loginURL"
    string callback_url = 2; // @gotags: yaml:"callbackURL"
    string redirect_uri = 3; // @gotags: yaml:"redirectURI"
}

message LoginCallBackRequest {
    string code = 1; // @gotags: yaml:"code"
    string host = 2; // @gotags: yaml:"host"
}

enum AccessTokenAgentUtility {
    INVALID_ACCESS_TOKEN_OPERATION =0;
    ORG_LOGIN = 1;
    REFRESH_TOKEN_LOGIN = 2;
}

enum RefreshTokenAgentUtility {
    INVALID_REFRESH_TOKEN_OPERATION =0;
    GENERATE_REFRESH_TOKEN = 1;
    REVOKE_REFRESH_TOKEN = 2;
}

/**
 * Represents a Studio access token.
 */
message AccessToken {
    string access_token = 1; // @gotags: yaml:"accessToken"
    int64 valid_from = 2; // @gotags: yaml:"validFrom"
    int64 valid_till = 3; // @gotags: yaml:"validTill"
    string id_token = 4; // @gotags: yaml:"idToken"
}

/**
 * Represents a request to generate a Studio access token.
 */
message AccessTokenInterfaceRequest {
    AccessTokenAgentUtility utility = 1; // @gotags: yaml:"utility"
    string id_token = 2; // @gotags: yaml:"idToken"
    string organization = 3; // @gotags: yaml:"organization"
    string data_product = 4; // @gotags: yaml:"dataProduct"
    string refresh_token = 5; // @gotags: yaml:"refreshToken"
}

message RegisterUserRequest {
    string id_token = 1; // @gotags: yaml:"idToken"
    string organization = 2; // @gotags: yaml:"organization"
}

/**
 * Represents a response containing a Studio access token.
 */
message AccessTokenResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
    AccessToken token = 2; // @gotags: yaml:"token"
    models.v1alpha1.AccessTokenScope token_scope = 3; // @gotags: yaml:"tokenScope"
}

/**
 * Represents a request to retrieve users.
 */
message GetUsersRequest {
    string organization = 1; // @gotags: yaml:"organization"
    string user_id = 2; // @gotags: yaml:"userId"
    string q = 3; // @gotags: yaml:"q"
}

/**
 * Represents a response containing users.
 */
message GetUserResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
    models.v1alpha1.User output = 2; // @gotags: yaml:"output"
}

message UserGetterRequest {
    models.v1alpha1.SearchParam search_param = 1; // @gotags: yaml:"SearchParam"
    string user_id = 2; // @gotags: yaml:"userId"
    UserGetterActions action = 3; // @gotags: yaml:"action"
}

message UserManagerRequest {
    UserAgentActions action = 1; // @gotags: yaml:"action"
    models.v1alpha1.User spec = 2; // @gotags: yaml:"user"
    string organization = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "The organization of the users to manage",
            title: "User Organization",
            type: STRING  // Type can be specified here
        }
    ]; // @gotags: yaml:"organization"
    repeated string role_arn = 4; // @gotags: yaml:"roleArn"
}

message UserResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
    message VapusUser {
        repeated models.v1alpha1.User users = 1; // @gotags: yaml:"user"
    }
    VapusUser output = 2; // @gotags: yaml:"output"
    map<string, string> organization_map = 3; // @gotags: yaml:"organizationMap"
}

message AuthzResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
    message AuthzRoles {
        repeated models.v1alpha1.VapusRoles roles = 1; // @gotags: yaml:"user"
    }
    AuthzRoles output = 2; // @gotags: yaml:"output"
}

message AuthzManagerRequest {
    AuthzAgentActions action = 1; // @gotags: yaml:"action"
    models.v1alpha1.VapusRoles spec = 2; // @gotags: yaml:"user"
}

message AuthzGetterRequest {
    models.v1alpha1.SearchParam search_param = 1; // @gotags: yaml:"SearchParam"
    string role_arn = 2; // @gotags: yaml:"roleArn"
}

message RefreshTokenManagerRequest {
    RefreshTokenAgentUtility utility = 1; // @gotags: yaml:"utility"
    int64 valid_day_count = 2; // @gotags: yaml:"validDayCount"
}

message RefreshTokenGetterRequest {
    string refresh_token = 1; // @gotags: yaml:"refreshToken"
}

message RefreshTokenResponse {
    models.v1alpha1.DMResponse dm_resp = 1; // @gotags: yaml:"dmResp"
    repeated models.v1alpha1.RefreshToken output = 2; // @gotags: yaml:"output"
}
