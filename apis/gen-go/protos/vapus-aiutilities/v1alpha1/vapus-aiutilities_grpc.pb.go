//*
// @fileoverview
// This file contains the protocol buffer definitions for the AI/ML utilties
//
// @packageDocumentation

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: protos/vapus-aiutilities/v1alpha1/vapus-aiutilities.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AIUtility_GenerateEmbedding_FullMethodName   = "/vapusdata.ai_studio.v1alpha1.AIUtility/GenerateEmbedding"
	AIUtility_SensitivityAnalyzer_FullMethodName = "/vapusdata.ai_studio.v1alpha1.AIUtility/SensitivityAnalyzer"
)

// AIUtilityClient is the client API for AIUtility service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIUtilityClient interface {
	//*
	// Generates Vector Embeddings for the given text.
	// @param {GenerateEmbeddingRequest} request - The request object containing the query parameters.
	// @returns {GenerateEmbeddingResponse} The response object containing the query results.
	GenerateEmbedding(ctx context.Context, in *GenerateEmbeddingRequest, opts ...grpc.CallOption) (*GenerateEmbeddingResponse, error)
	//*
	// Analyzed and acts on the given text.
	// @param {SensitivityAnalyzerRequest} request - The request object containing the query parameters.
	// @returns {SensitivityAnalyzerResponse} The response object containing the query results.
	SensitivityAnalyzer(ctx context.Context, in *SensitivityAnalyzerRequest, opts ...grpc.CallOption) (*SensitivityAnalyzerResponse, error)
}

type aIUtilityClient struct {
	cc grpc.ClientConnInterface
}

func NewAIUtilityClient(cc grpc.ClientConnInterface) AIUtilityClient {
	return &aIUtilityClient{cc}
}

func (c *aIUtilityClient) GenerateEmbedding(ctx context.Context, in *GenerateEmbeddingRequest, opts ...grpc.CallOption) (*GenerateEmbeddingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateEmbeddingResponse)
	err := c.cc.Invoke(ctx, AIUtility_GenerateEmbedding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIUtilityClient) SensitivityAnalyzer(ctx context.Context, in *SensitivityAnalyzerRequest, opts ...grpc.CallOption) (*SensitivityAnalyzerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SensitivityAnalyzerResponse)
	err := c.cc.Invoke(ctx, AIUtility_SensitivityAnalyzer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIUtilityServer is the server API for AIUtility service.
// All implementations must embed UnimplementedAIUtilityServer
// for forward compatibility
type AIUtilityServer interface {
	//*
	// Generates Vector Embeddings for the given text.
	// @param {GenerateEmbeddingRequest} request - The request object containing the query parameters.
	// @returns {GenerateEmbeddingResponse} The response object containing the query results.
	GenerateEmbedding(context.Context, *GenerateEmbeddingRequest) (*GenerateEmbeddingResponse, error)
	//*
	// Analyzed and acts on the given text.
	// @param {SensitivityAnalyzerRequest} request - The request object containing the query parameters.
	// @returns {SensitivityAnalyzerResponse} The response object containing the query results.
	SensitivityAnalyzer(context.Context, *SensitivityAnalyzerRequest) (*SensitivityAnalyzerResponse, error)
	mustEmbedUnimplementedAIUtilityServer()
}

// UnimplementedAIUtilityServer must be embedded to have forward compatible implementations.
type UnimplementedAIUtilityServer struct {
}

func (UnimplementedAIUtilityServer) GenerateEmbedding(context.Context, *GenerateEmbeddingRequest) (*GenerateEmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEmbedding not implemented")
}
func (UnimplementedAIUtilityServer) SensitivityAnalyzer(context.Context, *SensitivityAnalyzerRequest) (*SensitivityAnalyzerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SensitivityAnalyzer not implemented")
}
func (UnimplementedAIUtilityServer) mustEmbedUnimplementedAIUtilityServer() {}

// UnsafeAIUtilityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIUtilityServer will
// result in compilation errors.
type UnsafeAIUtilityServer interface {
	mustEmbedUnimplementedAIUtilityServer()
}

func RegisterAIUtilityServer(s grpc.ServiceRegistrar, srv AIUtilityServer) {
	s.RegisterService(&AIUtility_ServiceDesc, srv)
}

func _AIUtility_GenerateEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateEmbeddingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIUtilityServer).GenerateEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIUtility_GenerateEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIUtilityServer).GenerateEmbedding(ctx, req.(*GenerateEmbeddingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIUtility_SensitivityAnalyzer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensitivityAnalyzerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIUtilityServer).SensitivityAnalyzer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIUtility_SensitivityAnalyzer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIUtilityServer).SensitivityAnalyzer(ctx, req.(*SensitivityAnalyzerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIUtility_ServiceDesc is the grpc.ServiceDesc for AIUtility service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIUtility_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vapusdata.ai_studio.v1alpha1.AIUtility",
	HandlerType: (*AIUtilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateEmbedding",
			Handler:    _AIUtility_GenerateEmbedding_Handler,
		},
		{
			MethodName: "SensitivityAnalyzer",
			Handler:    _AIUtility_SensitivityAnalyzer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vapus-aiutilities/v1alpha1/vapus-aiutilities.proto",
}
