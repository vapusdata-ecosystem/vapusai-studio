// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: protos/vapusai-studio/v1alpha1/aiagents.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AIAgents_Manager_FullMethodName = "/vapusai.v1alpha1.AIAgents/Manager"
	AIAgents_Getter_FullMethodName  = "/vapusai.v1alpha1.AIAgents/Getter"
)

// AIAgentsClient is the client API for AIAgents service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIAgentsClient interface {
	Manager(ctx context.Context, in *AgentManagerRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	Getter(ctx context.Context, in *AgentGetterRequest, opts ...grpc.CallOption) (*AgentResponse, error)
}

type aIAgentsClient struct {
	cc grpc.ClientConnInterface
}

func NewAIAgentsClient(cc grpc.ClientConnInterface) AIAgentsClient {
	return &aIAgentsClient{cc}
}

func (c *aIAgentsClient) Manager(ctx context.Context, in *AgentManagerRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, AIAgents_Manager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIAgentsClient) Getter(ctx context.Context, in *AgentGetterRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, AIAgents_Getter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIAgentsServer is the server API for AIAgents service.
// All implementations must embed UnimplementedAIAgentsServer
// for forward compatibility
type AIAgentsServer interface {
	Manager(context.Context, *AgentManagerRequest) (*AgentResponse, error)
	Getter(context.Context, *AgentGetterRequest) (*AgentResponse, error)
	mustEmbedUnimplementedAIAgentsServer()
}

// UnimplementedAIAgentsServer must be embedded to have forward compatible implementations.
type UnimplementedAIAgentsServer struct {
}

func (UnimplementedAIAgentsServer) Manager(context.Context, *AgentManagerRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Manager not implemented")
}
func (UnimplementedAIAgentsServer) Getter(context.Context, *AgentGetterRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getter not implemented")
}
func (UnimplementedAIAgentsServer) mustEmbedUnimplementedAIAgentsServer() {}

// UnsafeAIAgentsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIAgentsServer will
// result in compilation errors.
type UnsafeAIAgentsServer interface {
	mustEmbedUnimplementedAIAgentsServer()
}

func RegisterAIAgentsServer(s grpc.ServiceRegistrar, srv AIAgentsServer) {
	s.RegisterService(&AIAgents_ServiceDesc, srv)
}

func _AIAgents_Manager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentsServer).Manager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgents_Manager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentsServer).Manager(ctx, req.(*AgentManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIAgents_Getter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentGetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentsServer).Getter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgents_Getter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentsServer).Getter(ctx, req.(*AgentGetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIAgents_ServiceDesc is the grpc.ServiceDesc for AIAgents service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIAgents_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vapusai.v1alpha1.AIAgents",
	HandlerType: (*AIAgentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Manager",
			Handler:    _AIAgents_Manager_Handler,
		},
		{
			MethodName: "Getter",
			Handler:    _AIAgents_Getter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vapusai-studio/v1alpha1/aiagents.proto",
}

const (
	AIAgentStudio_ChatStream_FullMethodName = "/vapusai.v1alpha1.AIAgentStudio/ChatStream"
	AIAgentStudio_Chat_FullMethodName       = "/vapusai.v1alpha1.AIAgentStudio/Chat"
)

// AIAgentStudioClient is the client API for AIAgentStudio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIAgentStudioClient interface {
	ChatStream(ctx context.Context, in *AgentInvokeRequest, opts ...grpc.CallOption) (AIAgentStudio_ChatStreamClient, error)
	Chat(ctx context.Context, in *AgentInvokeRequest, opts ...grpc.CallOption) (*AgentInvokeResponse, error)
}

type aIAgentStudioClient struct {
	cc grpc.ClientConnInterface
}

func NewAIAgentStudioClient(cc grpc.ClientConnInterface) AIAgentStudioClient {
	return &aIAgentStudioClient{cc}
}

func (c *aIAgentStudioClient) ChatStream(ctx context.Context, in *AgentInvokeRequest, opts ...grpc.CallOption) (AIAgentStudio_ChatStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIAgentStudio_ServiceDesc.Streams[0], AIAgentStudio_ChatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &aIAgentStudioChatStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AIAgentStudio_ChatStreamClient interface {
	Recv() (*AgentInvokeStreamResponse, error)
	grpc.ClientStream
}

type aIAgentStudioChatStreamClient struct {
	grpc.ClientStream
}

func (x *aIAgentStudioChatStreamClient) Recv() (*AgentInvokeStreamResponse, error) {
	m := new(AgentInvokeStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aIAgentStudioClient) Chat(ctx context.Context, in *AgentInvokeRequest, opts ...grpc.CallOption) (*AgentInvokeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentInvokeResponse)
	err := c.cc.Invoke(ctx, AIAgentStudio_Chat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIAgentStudioServer is the server API for AIAgentStudio service.
// All implementations must embed UnimplementedAIAgentStudioServer
// for forward compatibility
type AIAgentStudioServer interface {
	ChatStream(*AgentInvokeRequest, AIAgentStudio_ChatStreamServer) error
	Chat(context.Context, *AgentInvokeRequest) (*AgentInvokeResponse, error)
	mustEmbedUnimplementedAIAgentStudioServer()
}

// UnimplementedAIAgentStudioServer must be embedded to have forward compatible implementations.
type UnimplementedAIAgentStudioServer struct {
}

func (UnimplementedAIAgentStudioServer) ChatStream(*AgentInvokeRequest, AIAgentStudio_ChatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedAIAgentStudioServer) Chat(context.Context, *AgentInvokeRequest) (*AgentInvokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAIAgentStudioServer) mustEmbedUnimplementedAIAgentStudioServer() {}

// UnsafeAIAgentStudioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIAgentStudioServer will
// result in compilation errors.
type UnsafeAIAgentStudioServer interface {
	mustEmbedUnimplementedAIAgentStudioServer()
}

func RegisterAIAgentStudioServer(s grpc.ServiceRegistrar, srv AIAgentStudioServer) {
	s.RegisterService(&AIAgentStudio_ServiceDesc, srv)
}

func _AIAgentStudio_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentInvokeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIAgentStudioServer).ChatStream(m, &aIAgentStudioChatStreamServer{ServerStream: stream})
}

type AIAgentStudio_ChatStreamServer interface {
	Send(*AgentInvokeStreamResponse) error
	grpc.ServerStream
}

type aIAgentStudioChatStreamServer struct {
	grpc.ServerStream
}

func (x *aIAgentStudioChatStreamServer) Send(m *AgentInvokeStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AIAgentStudio_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIAgentStudioServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIAgentStudio_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIAgentStudioServer).Chat(ctx, req.(*AgentInvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIAgentStudio_ServiceDesc is the grpc.ServiceDesc for AIAgentStudio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIAgentStudio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vapusai.v1alpha1.AIAgentStudio",
	HandlerType: (*AIAgentStudioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _AIAgentStudio_Chat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _AIAgentStudio_ChatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/vapusai-studio/v1alpha1/aiagents.proto",
}
