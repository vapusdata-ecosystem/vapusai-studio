// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: protos/vapusai-studio/v1alpha1/aiprompts.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AIPrompts_Manager_FullMethodName = "/vapusai.v1alpha1.AIPrompts/Manager"
	AIPrompts_Getter_FullMethodName  = "/vapusai.v1alpha1.AIPrompts/Getter"
)

// AIPromptsClient is the client API for AIPrompts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIPromptsClient interface {
	// Creates a new prompt.
	// @param {PromptManagerRequest} request - The request object containing the prompt manager.
	// @returns {PromptResponse} The response object containing the created prompt.
	Manager(ctx context.Context, in *PromptManagerRequest, opts ...grpc.CallOption) (*PromptResponse, error)
	// Retrieves a prompt.
	// @param {PromptGetterRequest} request - The request object containing the prompt getter.
	// @returns {PromptResponse} The response object containing the retrieved prompt.
	Getter(ctx context.Context, in *PromptGetterRequest, opts ...grpc.CallOption) (*PromptResponse, error)
}

type aIPromptsClient struct {
	cc grpc.ClientConnInterface
}

func NewAIPromptsClient(cc grpc.ClientConnInterface) AIPromptsClient {
	return &aIPromptsClient{cc}
}

func (c *aIPromptsClient) Manager(ctx context.Context, in *PromptManagerRequest, opts ...grpc.CallOption) (*PromptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromptResponse)
	err := c.cc.Invoke(ctx, AIPrompts_Manager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIPromptsClient) Getter(ctx context.Context, in *PromptGetterRequest, opts ...grpc.CallOption) (*PromptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromptResponse)
	err := c.cc.Invoke(ctx, AIPrompts_Getter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIPromptsServer is the server API for AIPrompts service.
// All implementations must embed UnimplementedAIPromptsServer
// for forward compatibility
type AIPromptsServer interface {
	// Creates a new prompt.
	// @param {PromptManagerRequest} request - The request object containing the prompt manager.
	// @returns {PromptResponse} The response object containing the created prompt.
	Manager(context.Context, *PromptManagerRequest) (*PromptResponse, error)
	// Retrieves a prompt.
	// @param {PromptGetterRequest} request - The request object containing the prompt getter.
	// @returns {PromptResponse} The response object containing the retrieved prompt.
	Getter(context.Context, *PromptGetterRequest) (*PromptResponse, error)
	mustEmbedUnimplementedAIPromptsServer()
}

// UnimplementedAIPromptsServer must be embedded to have forward compatible implementations.
type UnimplementedAIPromptsServer struct {
}

func (UnimplementedAIPromptsServer) Manager(context.Context, *PromptManagerRequest) (*PromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Manager not implemented")
}
func (UnimplementedAIPromptsServer) Getter(context.Context, *PromptGetterRequest) (*PromptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getter not implemented")
}
func (UnimplementedAIPromptsServer) mustEmbedUnimplementedAIPromptsServer() {}

// UnsafeAIPromptsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIPromptsServer will
// result in compilation errors.
type UnsafeAIPromptsServer interface {
	mustEmbedUnimplementedAIPromptsServer()
}

func RegisterAIPromptsServer(s grpc.ServiceRegistrar, srv AIPromptsServer) {
	s.RegisterService(&AIPrompts_ServiceDesc, srv)
}

func _AIPrompts_Manager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIPromptsServer).Manager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIPrompts_Manager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIPromptsServer).Manager(ctx, req.(*PromptManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIPrompts_Getter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptGetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIPromptsServer).Getter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIPrompts_Getter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIPromptsServer).Getter(ctx, req.(*PromptGetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIPrompts_ServiceDesc is the grpc.ServiceDesc for AIPrompts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIPrompts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vapusai.v1alpha1.AIPrompts",
	HandlerType: (*AIPromptsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Manager",
			Handler:    _AIPrompts_Manager_Handler,
		},
		{
			MethodName: "Getter",
			Handler:    _AIPrompts_Getter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vapusai-studio/v1alpha1/aiprompts.proto",
}
