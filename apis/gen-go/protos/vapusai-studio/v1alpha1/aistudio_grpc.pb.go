// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: protos/vapusai-studio/v1alpha1/aistudio.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AIModelStudio_GenerateEmbeddings_FullMethodName = "/vapusai.v1alpha1.AIModelStudio/GenerateEmbeddings"
	AIModelStudio_Chat_FullMethodName               = "/vapusai.v1alpha1.AIModelStudio/Chat"
	AIModelStudio_ChatStream_FullMethodName         = "/vapusai.v1alpha1.AIModelStudio/ChatStream"
)

// AIModelStudioClient is the client API for AIModelStudio service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIModelStudioClient interface {
	// Generates embeddings for the given input text.
	// @param {EmbeddingsInterface} request - The request object containing the embeddings interface.
	// @returns {EmbeddingsResponse} The response object containing the embeddings.
	GenerateEmbeddings(ctx context.Context, in *EmbeddingsInterface, opts ...grpc.CallOption) (*EmbeddingsResponse, error)
	// Generates content based on the given prompt parameters.
	// @param {ChatRequest} request - The request object containing the generate interface.
	// @returns {ChatResponse} The response object containing the generated content.
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	// Generates content in a streaming fashion based on the given prompt parameters.
	// @param {ChatRequest} request - The request object containing the generate interface.
	// @returns {stream GenerateStreamResponse} The response object containing the generated content in a stream.
	ChatStream(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (AIModelStudio_ChatStreamClient, error)
}

type aIModelStudioClient struct {
	cc grpc.ClientConnInterface
}

func NewAIModelStudioClient(cc grpc.ClientConnInterface) AIModelStudioClient {
	return &aIModelStudioClient{cc}
}

func (c *aIModelStudioClient) GenerateEmbeddings(ctx context.Context, in *EmbeddingsInterface, opts ...grpc.CallOption) (*EmbeddingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbeddingsResponse)
	err := c.cc.Invoke(ctx, AIModelStudio_GenerateEmbeddings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIModelStudioClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, AIModelStudio_Chat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIModelStudioClient) ChatStream(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (AIModelStudio_ChatStreamClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIModelStudio_ServiceDesc.Streams[0], AIModelStudio_ChatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &aIModelStudioChatStreamClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AIModelStudio_ChatStreamClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type aIModelStudioChatStreamClient struct {
	grpc.ClientStream
}

func (x *aIModelStudioChatStreamClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AIModelStudioServer is the server API for AIModelStudio service.
// All implementations must embed UnimplementedAIModelStudioServer
// for forward compatibility
type AIModelStudioServer interface {
	// Generates embeddings for the given input text.
	// @param {EmbeddingsInterface} request - The request object containing the embeddings interface.
	// @returns {EmbeddingsResponse} The response object containing the embeddings.
	GenerateEmbeddings(context.Context, *EmbeddingsInterface) (*EmbeddingsResponse, error)
	// Generates content based on the given prompt parameters.
	// @param {ChatRequest} request - The request object containing the generate interface.
	// @returns {ChatResponse} The response object containing the generated content.
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	// Generates content in a streaming fashion based on the given prompt parameters.
	// @param {ChatRequest} request - The request object containing the generate interface.
	// @returns {stream GenerateStreamResponse} The response object containing the generated content in a stream.
	ChatStream(*ChatRequest, AIModelStudio_ChatStreamServer) error
	mustEmbedUnimplementedAIModelStudioServer()
}

// UnimplementedAIModelStudioServer must be embedded to have forward compatible implementations.
type UnimplementedAIModelStudioServer struct {
}

func (UnimplementedAIModelStudioServer) GenerateEmbeddings(context.Context, *EmbeddingsInterface) (*EmbeddingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateEmbeddings not implemented")
}
func (UnimplementedAIModelStudioServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAIModelStudioServer) ChatStream(*ChatRequest, AIModelStudio_ChatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedAIModelStudioServer) mustEmbedUnimplementedAIModelStudioServer() {}

// UnsafeAIModelStudioServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIModelStudioServer will
// result in compilation errors.
type UnsafeAIModelStudioServer interface {
	mustEmbedUnimplementedAIModelStudioServer()
}

func RegisterAIModelStudioServer(s grpc.ServiceRegistrar, srv AIModelStudioServer) {
	s.RegisterService(&AIModelStudio_ServiceDesc, srv)
}

func _AIModelStudio_GenerateEmbeddings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbeddingsInterface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIModelStudioServer).GenerateEmbeddings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIModelStudio_GenerateEmbeddings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIModelStudioServer).GenerateEmbeddings(ctx, req.(*EmbeddingsInterface))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIModelStudio_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIModelStudioServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIModelStudio_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIModelStudioServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIModelStudio_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIModelStudioServer).ChatStream(m, &aIModelStudioChatStreamServer{ServerStream: stream})
}

type AIModelStudio_ChatStreamServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type aIModelStudioChatStreamServer struct {
	grpc.ServerStream
}

func (x *aIModelStudioChatStreamServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AIModelStudio_ServiceDesc is the grpc.ServiceDesc for AIModelStudio service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIModelStudio_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vapusai.v1alpha1.AIModelStudio",
	HandlerType: (*AIModelStudioServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateEmbeddings",
			Handler:    _AIModelStudio_GenerateEmbeddings_Handler,
		},
		{
			MethodName: "Chat",
			Handler:    _AIModelStudio_Chat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _AIModelStudio_ChatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/vapusai-studio/v1alpha1/aistudio.proto",
}
