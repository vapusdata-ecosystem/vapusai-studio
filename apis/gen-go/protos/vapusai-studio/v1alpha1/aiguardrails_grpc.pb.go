// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: protos/vapusai-studio/v1alpha1/aiguardrails.proto

package v1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AIGuardrails_Manager_FullMethodName = "/vapusai.v1alpha1.AIGuardrails/Manager"
	AIGuardrails_Getter_FullMethodName  = "/vapusai.v1alpha1.AIGuardrails/Getter"
)

// AIGuardrailsClient is the client API for AIGuardrails service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIGuardrailsClient interface {
	Manager(ctx context.Context, in *GuardrailsManagerRequest, opts ...grpc.CallOption) (*GuardrailsResponse, error)
	Getter(ctx context.Context, in *GuardrailsGetterRequest, opts ...grpc.CallOption) (*GuardrailsResponse, error)
}

type aIGuardrailsClient struct {
	cc grpc.ClientConnInterface
}

func NewAIGuardrailsClient(cc grpc.ClientConnInterface) AIGuardrailsClient {
	return &aIGuardrailsClient{cc}
}

func (c *aIGuardrailsClient) Manager(ctx context.Context, in *GuardrailsManagerRequest, opts ...grpc.CallOption) (*GuardrailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuardrailsResponse)
	err := c.cc.Invoke(ctx, AIGuardrails_Manager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIGuardrailsClient) Getter(ctx context.Context, in *GuardrailsGetterRequest, opts ...grpc.CallOption) (*GuardrailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuardrailsResponse)
	err := c.cc.Invoke(ctx, AIGuardrails_Getter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIGuardrailsServer is the server API for AIGuardrails service.
// All implementations must embed UnimplementedAIGuardrailsServer
// for forward compatibility
type AIGuardrailsServer interface {
	Manager(context.Context, *GuardrailsManagerRequest) (*GuardrailsResponse, error)
	Getter(context.Context, *GuardrailsGetterRequest) (*GuardrailsResponse, error)
	mustEmbedUnimplementedAIGuardrailsServer()
}

// UnimplementedAIGuardrailsServer must be embedded to have forward compatible implementations.
type UnimplementedAIGuardrailsServer struct {
}

func (UnimplementedAIGuardrailsServer) Manager(context.Context, *GuardrailsManagerRequest) (*GuardrailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Manager not implemented")
}
func (UnimplementedAIGuardrailsServer) Getter(context.Context, *GuardrailsGetterRequest) (*GuardrailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getter not implemented")
}
func (UnimplementedAIGuardrailsServer) mustEmbedUnimplementedAIGuardrailsServer() {}

// UnsafeAIGuardrailsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIGuardrailsServer will
// result in compilation errors.
type UnsafeAIGuardrailsServer interface {
	mustEmbedUnimplementedAIGuardrailsServer()
}

func RegisterAIGuardrailsServer(s grpc.ServiceRegistrar, srv AIGuardrailsServer) {
	s.RegisterService(&AIGuardrails_ServiceDesc, srv)
}

func _AIGuardrails_Manager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuardrailsManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIGuardrailsServer).Manager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIGuardrails_Manager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIGuardrailsServer).Manager(ctx, req.(*GuardrailsManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIGuardrails_Getter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuardrailsGetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIGuardrailsServer).Getter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIGuardrails_Getter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIGuardrailsServer).Getter(ctx, req.(*GuardrailsGetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIGuardrails_ServiceDesc is the grpc.ServiceDesc for AIGuardrails service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIGuardrails_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vapusai.v1alpha1.AIGuardrails",
	HandlerType: (*AIGuardrailsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Manager",
			Handler:    _AIGuardrails_Manager_Handler,
		},
		{
			MethodName: "Getter",
			Handler:    _AIGuardrails_Getter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vapusai-studio/v1alpha1/aiguardrails.proto",
}
