//*
// @fileoverview
// This file contains the protocol buffer definitions for the User API.
// The User API allows users to create and manage Users
// multiple sources.
//
// @packageDocumentation

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: protos/vapusai-studio/v1alpha1/users.proto

package v1alpha1

import (
	context "context"
	v1alpha1 "github.com/vapusdata-ecosystem/apis/protos/models/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserManagementService_AccessTokenInterface_FullMethodName = "/vapusai.v1alpha1.UserManagementService/AccessTokenInterface"
	UserManagementService_RegisterUser_FullMethodName         = "/vapusai.v1alpha1.UserManagementService/RegisterUser"
	UserManagementService_UserManager_FullMethodName          = "/vapusai.v1alpha1.UserManagementService/UserManager"
	UserManagementService_RefreshTokenManager_FullMethodName  = "/vapusai.v1alpha1.UserManagementService/RefreshTokenManager"
	UserManagementService_RefreshTokenGetter_FullMethodName   = "/vapusai.v1alpha1.UserManagementService/RefreshTokenGetter"
	UserManagementService_UserGetter_FullMethodName           = "/vapusai.v1alpha1.UserManagementService/UserGetter"
	UserManagementService_AuthzManager_FullMethodName         = "/vapusai.v1alpha1.UserManagementService/AuthzManager"
	UserManagementService_AuthzGetter_FullMethodName          = "/vapusai.v1alpha1.UserManagementService/AuthzGetter"
	UserManagementService_LoginHandler_FullMethodName         = "/vapusai.v1alpha1.UserManagementService/LoginHandler"
	UserManagementService_LoginCallback_FullMethodName        = "/vapusai.v1alpha1.UserManagementService/LoginCallback"
)

// UserManagementServiceClient is the client API for UserManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// The UserManagementService is the service interface for managing users across vapusai services.
type UserManagementServiceClient interface {
	// *
	// Generates a access token for the given user.
	// @param {AccessTokenInterfaceRequest} request - The request object.
	// @returns {AccessTokenResponse} The response object.
	AccessTokenInterface(ctx context.Context, in *AccessTokenInterfaceRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error)
	// *
	// Manages user operations.
	// @param {UserManagerRequest} request - The request object.
	// @returns {UserResponse} The response object.
	UserManager(ctx context.Context, in *UserManagerRequest, opts ...grpc.CallOption) (*UserResponse, error)
	RefreshTokenManager(ctx context.Context, in *RefreshTokenManagerRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	RefreshTokenGetter(ctx context.Context, in *RefreshTokenGetterRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	// *
	// Retrieves user information.
	// @param {UserGetterRequest} request - The request object.
	// @returns {UserResponse} The response object.
	UserGetter(ctx context.Context, in *UserGetterRequest, opts ...grpc.CallOption) (*UserResponse, error)
	// *
	// Manages authorization operations.
	// @param {AuthzManagerRequest} request - The request object.
	// @returns {AuthzResponse} The response object.
	AuthzManager(ctx context.Context, in *AuthzManagerRequest, opts ...grpc.CallOption) (*AuthzResponse, error)
	// *
	// Retrieves authorization information.
	// @param {AuthzGetterRequest} request - The request object.
	// @returns {AuthzResponse} The response object.
	AuthzGetter(ctx context.Context, in *AuthzGetterRequest, opts ...grpc.CallOption) (*AuthzResponse, error)
	// *
	// Handles login requests.
	// @param {models.v1alpha1.EmptyRequest} request - The request object.
	// @returns {LoginHandlerResponse} The response object.
	LoginHandler(ctx context.Context, in *v1alpha1.EmptyRequest, opts ...grpc.CallOption) (*LoginHandlerResponse, error)
	// *
	// Handles login callbacks.
	// @param {LoginCallBackRequest} request - The request object.
	// @returns {AccessTokenResponse} The response object.
	LoginCallback(ctx context.Context, in *LoginCallBackRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error)
}

type userManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementServiceClient(cc grpc.ClientConnInterface) UserManagementServiceClient {
	return &userManagementServiceClient{cc}
}

func (c *userManagementServiceClient) AccessTokenInterface(ctx context.Context, in *AccessTokenInterfaceRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, UserManagementService_AccessTokenInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, UserManagementService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UserManager(ctx context.Context, in *UserManagerRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_UserManager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) RefreshTokenManager(ctx context.Context, in *RefreshTokenManagerRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserManagementService_RefreshTokenManager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) RefreshTokenGetter(ctx context.Context, in *RefreshTokenGetterRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenResponse)
	err := c.cc.Invoke(ctx, UserManagementService_RefreshTokenGetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) UserGetter(ctx context.Context, in *UserGetterRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, UserManagementService_UserGetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) AuthzManager(ctx context.Context, in *AuthzManagerRequest, opts ...grpc.CallOption) (*AuthzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthzResponse)
	err := c.cc.Invoke(ctx, UserManagementService_AuthzManager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) AuthzGetter(ctx context.Context, in *AuthzGetterRequest, opts ...grpc.CallOption) (*AuthzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthzResponse)
	err := c.cc.Invoke(ctx, UserManagementService_AuthzGetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) LoginHandler(ctx context.Context, in *v1alpha1.EmptyRequest, opts ...grpc.CallOption) (*LoginHandlerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginHandlerResponse)
	err := c.cc.Invoke(ctx, UserManagementService_LoginHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementServiceClient) LoginCallback(ctx context.Context, in *LoginCallBackRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, UserManagementService_LoginCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagementServiceServer is the server API for UserManagementService service.
// All implementations must embed UnimplementedUserManagementServiceServer
// for forward compatibility
//
// *
// The UserManagementService is the service interface for managing users across vapusai services.
type UserManagementServiceServer interface {
	// *
	// Generates a access token for the given user.
	// @param {AccessTokenInterfaceRequest} request - The request object.
	// @returns {AccessTokenResponse} The response object.
	AccessTokenInterface(context.Context, *AccessTokenInterfaceRequest) (*AccessTokenResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*AccessTokenResponse, error)
	// *
	// Manages user operations.
	// @param {UserManagerRequest} request - The request object.
	// @returns {UserResponse} The response object.
	UserManager(context.Context, *UserManagerRequest) (*UserResponse, error)
	RefreshTokenManager(context.Context, *RefreshTokenManagerRequest) (*RefreshTokenResponse, error)
	RefreshTokenGetter(context.Context, *RefreshTokenGetterRequest) (*RefreshTokenResponse, error)
	// *
	// Retrieves user information.
	// @param {UserGetterRequest} request - The request object.
	// @returns {UserResponse} The response object.
	UserGetter(context.Context, *UserGetterRequest) (*UserResponse, error)
	// *
	// Manages authorization operations.
	// @param {AuthzManagerRequest} request - The request object.
	// @returns {AuthzResponse} The response object.
	AuthzManager(context.Context, *AuthzManagerRequest) (*AuthzResponse, error)
	// *
	// Retrieves authorization information.
	// @param {AuthzGetterRequest} request - The request object.
	// @returns {AuthzResponse} The response object.
	AuthzGetter(context.Context, *AuthzGetterRequest) (*AuthzResponse, error)
	// *
	// Handles login requests.
	// @param {models.v1alpha1.EmptyRequest} request - The request object.
	// @returns {LoginHandlerResponse} The response object.
	LoginHandler(context.Context, *v1alpha1.EmptyRequest) (*LoginHandlerResponse, error)
	// *
	// Handles login callbacks.
	// @param {LoginCallBackRequest} request - The request object.
	// @returns {AccessTokenResponse} The response object.
	LoginCallback(context.Context, *LoginCallBackRequest) (*AccessTokenResponse, error)
	mustEmbedUnimplementedUserManagementServiceServer()
}

// UnimplementedUserManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagementServiceServer struct {
}

func (UnimplementedUserManagementServiceServer) AccessTokenInterface(context.Context, *AccessTokenInterfaceRequest) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessTokenInterface not implemented")
}
func (UnimplementedUserManagementServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserManagementServiceServer) UserManager(context.Context, *UserManagerRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserManager not implemented")
}
func (UnimplementedUserManagementServiceServer) RefreshTokenManager(context.Context, *RefreshTokenManagerRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenManager not implemented")
}
func (UnimplementedUserManagementServiceServer) RefreshTokenGetter(context.Context, *RefreshTokenGetterRequest) (*RefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenGetter not implemented")
}
func (UnimplementedUserManagementServiceServer) UserGetter(context.Context, *UserGetterRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetter not implemented")
}
func (UnimplementedUserManagementServiceServer) AuthzManager(context.Context, *AuthzManagerRequest) (*AuthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthzManager not implemented")
}
func (UnimplementedUserManagementServiceServer) AuthzGetter(context.Context, *AuthzGetterRequest) (*AuthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthzGetter not implemented")
}
func (UnimplementedUserManagementServiceServer) LoginHandler(context.Context, *v1alpha1.EmptyRequest) (*LoginHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginHandler not implemented")
}
func (UnimplementedUserManagementServiceServer) LoginCallback(context.Context, *LoginCallBackRequest) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginCallback not implemented")
}
func (UnimplementedUserManagementServiceServer) mustEmbedUnimplementedUserManagementServiceServer() {}

// UnsafeUserManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagementServiceServer will
// result in compilation errors.
type UnsafeUserManagementServiceServer interface {
	mustEmbedUnimplementedUserManagementServiceServer()
}

func RegisterUserManagementServiceServer(s grpc.ServiceRegistrar, srv UserManagementServiceServer) {
	s.RegisterService(&UserManagementService_ServiceDesc, srv)
}

func _UserManagementService_AccessTokenInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).AccessTokenInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_AccessTokenInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).AccessTokenInterface(ctx, req.(*AccessTokenInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UserManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UserManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_UserManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UserManager(ctx, req.(*UserManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_RefreshTokenManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).RefreshTokenManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_RefreshTokenManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).RefreshTokenManager(ctx, req.(*RefreshTokenManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_RefreshTokenGetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenGetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).RefreshTokenGetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_RefreshTokenGetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).RefreshTokenGetter(ctx, req.(*RefreshTokenGetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_UserGetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).UserGetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_UserGetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).UserGetter(ctx, req.(*UserGetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_AuthzManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthzManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).AuthzManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_AuthzManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).AuthzManager(ctx, req.(*AuthzManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_AuthzGetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthzGetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).AuthzGetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_AuthzGetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).AuthzGetter(ctx, req.(*AuthzGetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_LoginHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).LoginHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_LoginHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).LoginHandler(ctx, req.(*v1alpha1.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagementService_LoginCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginCallBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServiceServer).LoginCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserManagementService_LoginCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServiceServer).LoginCallback(ctx, req.(*LoginCallBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagementService_ServiceDesc is the grpc.ServiceDesc for UserManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vapusai.v1alpha1.UserManagementService",
	HandlerType: (*UserManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccessTokenInterface",
			Handler:    _UserManagementService_AccessTokenInterface_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _UserManagementService_RegisterUser_Handler,
		},
		{
			MethodName: "UserManager",
			Handler:    _UserManagementService_UserManager_Handler,
		},
		{
			MethodName: "RefreshTokenManager",
			Handler:    _UserManagementService_RefreshTokenManager_Handler,
		},
		{
			MethodName: "RefreshTokenGetter",
			Handler:    _UserManagementService_RefreshTokenGetter_Handler,
		},
		{
			MethodName: "UserGetter",
			Handler:    _UserManagementService_UserGetter_Handler,
		},
		{
			MethodName: "AuthzManager",
			Handler:    _UserManagementService_AuthzManager_Handler,
		},
		{
			MethodName: "AuthzGetter",
			Handler:    _UserManagementService_AuthzGetter_Handler,
		},
		{
			MethodName: "LoginHandler",
			Handler:    _UserManagementService_LoginHandler_Handler,
		},
		{
			MethodName: "LoginCallback",
			Handler:    _UserManagementService_LoginCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vapusai-studio/v1alpha1/users.proto",
}
