{
  "components": {
    "schemas": {
      "AIAttributes": {
        "properties": {
          "embeddingModel": {
            "title": "@gotags: yaml:\"embeddingModel\"",
            "type": "string"
          },
          "embeddingModelNode": {
            "title": "@gotags: yaml:\"embeddingModelNode\"",
            "type": "string"
          },
          "generativeModel": {
            "title": "@gotags: yaml:\"generativeModel\"",
            "type": "string"
          },
          "generativeModelNode": {
            "title": "@gotags: yaml:\"generativeModelNode\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AIModelBase": {
        "properties": {
          "modelId": {
            "title": "@gotags: yaml:\"modelId\"",
            "type": "string"
          },
          "modelName": {
            "title": "@gotags: yaml:\"modelName\"",
            "type": "string"
          },
          "modelType": {
            "$ref": "#/components/schemas/AIModelType"
          },
          "ownedBy": {
            "title": "@gotags: yaml:\"ownedBy\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AIModelNode": {
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/AIModelNodeAttributes"
          },
          "modelNodeId": {
            "title": "@gotags: yaml:\"modelNodeId\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "nodeOwners": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"nodeOwners\"",
            "type": "array"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AIModelNodeAction": {
        "default": "INVALID_AIAGENT_ACTION",
        "enum": [
          "INVALID_AIAGENT_ACTION",
          "GENERATE_CONTENT",
          "GENERATE_EMBEDDING",
          "GENERATE_DATAQUERIES",
          "GENERATE_IMAGES",
          "GENERATE_VIDEOS",
          "GENERATE_TRANSCRIPT",
          "LIST_NODE_CONNECTION_POOL"
        ],
        "type": "string"
      },
      "AIModelNodeAttributes": {
        "properties": {
          "discoverModels": {
            "title": "@gotags: yaml:\"discoverModels\"",
            "type": "boolean"
          },
          "domainId": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"domainId\"",
            "type": "array"
          },
          "embeddingModels": {
            "items": {
              "$ref": "#/components/schemas/AIModelBase"
            },
            "title": "@gotags: yaml:\"embeddingModels\"",
            "type": "array"
          },
          "generativeModels": {
            "items": {
              "$ref": "#/components/schemas/AIModelBase"
            },
            "title": "@gotags: yaml:\"generativeModels\"",
            "type": "array"
          },
          "hosting": {
            "$ref": "#/components/schemas/AIModelNodeHosting"
          },
          "networkParams": {
            "$ref": "#/components/schemas/AIModelNodeNetworkParams"
          },
          "scope": {
            "$ref": "#/components/schemas/AIModelNodeScope"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/AIModelNodeServiceProvider"
          }
        },
        "type": "object"
      },
      "AIModelNodeConfiguratorActions": {
        "default": "INVALID_AINODE_CONFIG_ACTION",
        "enum": [
          "INVALID_AINODE_CONFIG_ACTION",
          "CONFIGURE_AIMODEL_NODES",
          "LIST_AIMODEL_NODES",
          "DELETE_AIMODEL_NODES",
          "DESCRIBE_AIMODEL_NODE"
        ],
        "type": "string"
      },
      "AIModelNodeConfiguratorRequest": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AIModelNodeConfiguratorActions"
          },
          "spec": {
            "items": {
              "$ref": "#/components/schemas/AIModelNode"
            },
            "title": "@gotags: yaml:\"spec\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "AIModelNodeHosting": {
        "default": "INVALID_MODEL_HOSTING",
        "enum": [
          "INVALID_MODEL_HOSTING",
          "LOCAL_AIHOST",
          "OPEN_SOURCE_AIHOST",
          "MANAGED_AIHOST"
        ],
        "type": "string"
      },
      "AIModelNodeInterfaceRequest": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/AIModelNodeAction"
            },
            "title": "@gotags: yaml:\"actions\"",
            "type": "array"
          },
          "spec": {
            "$ref": "#/components/schemas/AIModelNodePromptParams"
          }
        },
        "type": "object"
      },
      "AIModelNodeInterfaceResponse": {
        "properties": {
          "output": {
            "$ref": "#/components/schemas/NodeManagerResponse"
          }
        },
        "type": "object"
      },
      "AIModelNodeNetworkParams": {
        "properties": {
          "apiVersion": {
            "title": "@gotags: yaml:\"apiVersion\"",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/GenericCredentialObj"
          },
          "isAlreadyInSecretBs": {
            "title": "@gotags: yaml:\"isAlreadyInSecretBS\"",
            "type": "boolean"
          },
          "localPath": {
            "title": "@gotags: yaml:\"localPath\"",
            "type": "string"
          },
          "secretName": {
            "title": "@gotags: yaml:\"secretName\"",
            "type": "string"
          },
          "url": {
            "title": "@gotags: yaml:\"url\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AIModelNodePromptParams": {
        "properties": {
          "aiModel": {
            "title": "@gotags: yaml:\"aiModel\"",
            "type": "string"
          },
          "context": {
            "title": "@gotags: yaml:\"ragContext\"",
            "type": "string"
          },
          "embeddingDimensions": {
            "format": "int64",
            "title": "@gotags: yaml:\"embeddingDimensions\"",
            "type": "string"
          },
          "inputText": {
            "title": "@gotags: yaml:\"inputText\"",
            "type": "string"
          },
          "modelNodeId": {
            "title": "@gotags: yaml:\"modelNodeId\"",
            "type": "string"
          },
          "promptTemplate": {
            "title": "@gotags: yaml:\"promptTemplate\"",
            "type": "string"
          },
          "ragParams": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"ragParams\"",
            "type": "array"
          },
          "responseWithExplanation": {
            "title": "@gotags: yaml:\"responseWithExplanation\"",
            "type": "boolean"
          },
          "systemMessage": {
            "title": "@gotags: yaml:\"systemMessage\"",
            "type": "string"
          },
          "temperature": {
            "format": "float",
            "title": "@gotags: yaml:\"temperature\"",
            "type": "number"
          },
          "useLatestModel": {
            "title": "@gotags: yaml:\"useLatestModel\"",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AIModelNodeResponse.AIModelNodeResponse": {
        "properties": {
          "aiModelNodes": {
            "items": {
              "$ref": "#/components/schemas/AIModelNode"
            },
            "title": "@gotags: yaml:\"aiModelNodes\"",
            "type": "array"
          },
          "availableModelsPool": {
            "items": {
              "$ref": "#/components/schemas/MapList"
            },
            "title": "@gotags: yaml:\"availableModelsPool\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "AIModelNodeScope": {
        "default": "INVALID_CONFIG_LEVEL",
        "enum": [
          "INVALID_CONFIG_LEVEL",
          "DOMAIN_AIMODEL",
          "PLATFORM_AIMODEL"
        ],
        "type": "string"
      },
      "AIModelNodeServiceProvider": {
        "default": "INVALID_AI_SP",
        "enum": [
          "INVALID_AI_SP",
          "AISP_OPENAI",
          "AISP_MISTRAL",
          "AISP_HUGGING_FACE",
          "AISP_VAPUS",
          "AISP_OLLAMA",
          "AISP_AZURE_OPENAI",
          "AISP_AZURE_PHI",
          "AISP_GEMINI",
          "AISP_AWS",
          "AISP_META",
          "AISP_GROK"
        ],
        "type": "string"
      },
      "AIModelResult": {
        "properties": {
          "embeddings": {
            "items": {
              "$ref": "#/components/schemas/VectorEmbeddings"
            },
            "title": "@gotags: yaml:\"embeddings\"",
            "type": "array"
          },
          "metadata": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"metadata\"",
            "type": "array"
          },
          "result": {
            "title": "@gotags: yaml:\"result\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AIModelType": {
        "default": "INVALID_AIMODEL_TYPE",
        "enum": [
          "INVALID_AIMODEL_TYPE",
          "LLM",
          "SLM",
          "EMBEDDING"
        ],
        "type": "string"
      },
      "AIPromptLCAction": {
        "default": "INVALID_PROMPT_ACTION",
        "enum": [
          "INVALID_PROMPT_ACTION",
          "CONFIGURE_PROMPT",
          "DRY_SAMPLE_RESULT",
          "LIST_PROMPT",
          "DESCRIBE_PROMPT",
          "ARCHIVE_PROMPT"
        ],
        "type": "string"
      },
      "AWSCreds": {
        "properties": {
          "accessKeyId": {
            "title": "@gotags: yaml:\"accessKeyId\"",
            "type": "string"
          },
          "region": {
            "title": "@gotags: yaml:\"region\"",
            "type": "string"
          },
          "secretAccessKey": {
            "title": "@gotags: yaml:\"secretAccessKey\"",
            "type": "string"
          },
          "sessionToken": {
            "title": "@gotags: yaml:\"sessionToken\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccessControlPolicy": {
        "description": "*\nMessage for defining an access control policy.",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/DataProductGovernancePolicies"
          },
          "rules": {
            "$ref": "#/components/schemas/AccessControlRules"
          }
        },
        "type": "object"
      },
      "AccessControlRules": {
        "description": "*\nMessage for defining access control rules.",
        "properties": {
          "roleRules": {
            "items": {
              "$ref": "#/components/schemas/DataProductUserRole"
            },
            "title": "@gotags: yaml:\"roleRules\"",
            "type": "array"
          },
          "userRules": {
            "items": {
              "$ref": "#/components/schemas/DataProductUsers"
            },
            "title": "@gotags: yaml:\"userRules\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "AccessToken": {
        "description": "*\nRepresents a platform access token.",
        "properties": {
          "accessToken": {
            "title": "@gotags: yaml:\"accessToken\"",
            "type": "string"
          },
          "idToken": {
            "title": "@gotags: yaml:\"idToken\"",
            "type": "string"
          },
          "validFrom": {
            "format": "int64",
            "title": "@gotags: yaml:\"validFrom\"",
            "type": "string"
          },
          "validTill": {
            "format": "int64",
            "title": "@gotags: yaml:\"validTill\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccessTokenAgentUtility": {
        "default": "INVALID_ACCESS_TOKEN_OPERATION",
        "enum": [
          "INVALID_ACCESS_TOKEN_OPERATION",
          "DOMAIN_LOGIN",
          "DATAPRODUCT_LOGIN"
        ],
        "type": "string"
      },
      "AccessTokenInterfaceRequest": {
        "description": "*\nRepresents a request to generate a platform access token.",
        "properties": {
          "dataProduct": {
            "title": "@gotags: yaml:\"dataProduct\"",
            "type": "string"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "idToken": {
            "title": "@gotags: yaml:\"idToken\"",
            "type": "string"
          },
          "utility": {
            "$ref": "#/components/schemas/AccessTokenAgentUtility"
          }
        },
        "type": "object"
      },
      "AccessTokenResponse": {
        "description": "*\nRepresents a response containing a platform access token.",
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "token": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "tokenScope": {
            "$ref": "#/components/schemas/AccessTokenScope"
          }
        },
        "type": "object"
      },
      "AccessTokenScope": {
        "default": "INVALID_AT_SCOPE",
        "enum": [
          "INVALID_AT_SCOPE",
          "DOMAIN_TOKEN",
          "DATAPRODUCT_TOKEN"
        ],
        "type": "string"
      },
      "Account": {
        "description": "*\nMessage representing an account.",
        "properties": {
          "accountId": {
            "title": "@gotags: yaml:\"accountId\"",
            "type": "string"
          },
          "aiAttributes": {
            "$ref": "#/components/schemas/AIAttributes"
          },
          "artifactStorage": {
            "$ref": "#/components/schemas/BackendStorages"
          },
          "authnMethod": {
            "$ref": "#/components/schemas/AuthnMethod"
          },
          "backendDataStorage": {
            "$ref": "#/components/schemas/BackendStorages"
          },
          "backendSecretStorage": {
            "$ref": "#/components/schemas/BackendStorages"
          },
          "datamesh": {
            "items": {
              "$ref": "#/components/schemas/DataMesh"
            },
            "title": "@gotags: yaml:\"datamesh\"",
            "type": "array"
          },
          "dmAccessJwtKeys": {
            "$ref": "#/components/schemas/JWTParams"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "oidcParams": {
            "$ref": "#/components/schemas/AuthnOIDC"
          },
          "profile": {
            "$ref": "#/components/schemas/AccountProfile"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountAgentActions": {
        "default": "INVALID_ACCOUNT_ACTION",
        "enum": [
          "INVALID_ACCOUNT_ACTION",
          "LIST_ACCOUNT",
          "CONFIGURE_AISTUDIO_MODEL"
        ],
        "type": "string"
      },
      "AccountManagerRequest": {
        "description": "*\nThe AccountManagerRequest message contains the information required to create or retrieve an account.",
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/AccountAgentActions"
          },
          "spec": {
            "$ref": "#/components/schemas/Account"
          }
        },
        "type": "object"
      },
      "AccountProfile": {
        "properties": {
          "address": {
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "title": "@gotags: yaml:\"address\"",
            "type": "array"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "logo": {
            "title": "@gotags: yaml:\"logo\"",
            "type": "string"
          },
          "moto": {
            "title": "@gotags: yaml:\"moto\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AccountResponse": {
        "description": "*\nThe AccountResponse message contains the response to an account creation or retrieval request.",
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/Account"
          }
        },
        "type": "object"
      },
      "Address": {
        "properties": {
          "city": {
            "title": "@gotags: yaml:\"city\"",
            "type": "string"
          },
          "country": {
            "title": "@gotags: yaml:\"country\"",
            "type": "string"
          },
          "others": {
            "title": "@gotags: yaml:\"others\"",
            "type": "string"
          },
          "state": {
            "title": "@gotags: yaml:\"state\"",
            "type": "string"
          },
          "streetAddress1": {
            "title": "@gotags: yaml:\"streetAddress1\"",
            "type": "string"
          },
          "streetAddress2": {
            "title": "@gotags: yaml:\"streetAddress2\"",
            "type": "string"
          },
          "zipCode": {
            "title": "@gotags: yaml:\"zipCode\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AgentShort": {
        "properties": {
          "agent": {
            "title": "@gotags: yaml:\"agent\"",
            "type": "string"
          },
          "agentType": {
            "title": "@gotags: yaml:\"agentType\"",
            "type": "string"
          },
          "error": {
            "title": "@gotags: yaml:\"error\"",
            "type": "string"
          },
          "goalStatus": {
            "title": "@gotags: yaml:\"goalStatus\"",
            "type": "string"
          },
          "result": {
            "title": "@gotags: yaml:\"result\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Any": {
        "additionalProperties": {},
        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
        "properties": {
          "@type": {
            "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ApiTokenType": {
        "default": "BASIC",
        "enum": [
          "BASIC",
          "BEARER",
          "APIKEY"
        ],
        "type": "string"
      },
      "ArtifactAttestation": {
        "description": "*\nMessage representing the attestation information for a artifact.",
        "properties": {
          "attestation": {
            "items": {
              "$ref": "#/components/schemas/MapList"
            },
            "title": "@gotags: yaml:\"attestation\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "ArtifactGrid": {
        "description": "*\n@message\nRepresents the package server construct.",
        "properties": {
          "packageJwtParams": {
            "$ref": "#/components/schemas/JWTParams"
          },
          "sslCerts": {
            "$ref": "#/components/schemas/SSLCerts"
          }
        },
        "type": "object"
      },
      "ArtifactSigningInfo": {
        "description": "*\nMessage representing the signing information for a artifact.",
        "properties": {
          "isSigned": {
            "title": "@gotags: yaml:\"isSigned\"",
            "type": "string"
          },
          "signingAuthor": {
            "title": "@gotags: yaml:\"signingAuthor\"",
            "type": "string"
          },
          "signingAuthority": {
            "title": "@gotags: yaml:\"signingAuthority\"",
            "type": "string"
          },
          "signingMethod": {
            "title": "@gotags: yaml:\"signingMethod\"",
            "type": "string"
          },
          "signingOidcProvider": {
            "title": "@gotags: yaml:\"signingOIDCProvider\"",
            "type": "string"
          },
          "signingPublicKey": {
            "title": "@gotags: yaml:\"signingPublicKey\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ArtifactSourceMetaData": {
        "properties": {
          "artifactTypes": {
            "items": {
              "$ref": "#/components/schemas/ArtifactTypes"
            },
            "title": "@gotags: yaml:\"artifactTypes\"",
            "type": "array"
          },
          "artifacts": {
            "items": {
              "$ref": "#/components/schemas/Artifacts"
            },
            "title": "@gotags: yaml:\"artifacts\"",
            "type": "array"
          },
          "dataSource": {
            "$ref": "#/components/schemas/BaseIdentifier"
          },
          "dataType": {
            "$ref": "#/components/schemas/DataSourceType"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "domain": {
            "$ref": "#/components/schemas/BaseIdentifier"
          },
          "storageEngine": {
            "title": "@gotags: yaml:\"storageEngine\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ArtifactTypes": {
        "default": "INVALID_PT",
        "description": "*\n@enum\nEnumerates the types of packages.",
        "enum": [
          "INVALID_PT",
          "PT_NA",
          "PT_OCI",
          "PT_PYPI",
          "PT_DOCKER",
          "PT_BLOBS",
          "PT_MEDIA"
        ],
        "type": "string"
      },
      "ArtifactVersion": {
        "description": "*\nMessage representing a version of a artifact.",
        "properties": {
          "attestationParams": {
            "$ref": "#/components/schemas/ArtifactAttestation"
          },
          "digest": {
            "$ref": "#/components/schemas/DigestVal"
          },
          "lastPullOn": {
            "format": "int64",
            "title": "@gotags: yaml:\"lastPullOn\"",
            "type": "string"
          },
          "mediaType": {
            "title": "@gotags: yaml:\"mediaType\"",
            "type": "string"
          },
          "pushedOn": {
            "format": "int64",
            "title": "@gotags: yaml:\"pushedOn\"",
            "type": "string"
          },
          "signingParams": {
            "$ref": "#/components/schemas/ArtifactSigningInfo"
          },
          "sizeInBytes": {
            "format": "int64",
            "title": "@gotags: yaml:\"sizeInBytes\"",
            "type": "string"
          },
          "tag": {
            "title": "@gotags: yaml:\"tag\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Artifacts": {
        "description": "*\nMessage representing a artifact in the Vapus Data Platform system.",
        "properties": {
          "artifactType": {
            "$ref": "#/components/schemas/ArtifactTypes"
          },
          "isPublic": {
            "title": "@gotags: yaml:\"isPublic\"",
            "type": "boolean"
          },
          "lastUpdatedAt": {
            "format": "int64",
            "title": "@gotags: yaml:\"lastUpdatedAt\"",
            "type": "string"
          },
          "locPath": {
            "title": "@gotags: yaml:\"locPath\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/ArtifactVersion"
            },
            "title": "@gotags: yaml:\"tags\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "AttributeFilter": {
        "properties": {
          "attributeName": {
            "title": "@gotags: yaml:\"attributeName\"",
            "type": "string"
          },
          "consumerAttributeRef": {
            "title": "@gotags: yaml:\"consumerAttributeRef\"",
            "type": "string"
          },
          "filterValue": {
            "title": "@gotags: yaml:\"filterValue\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AttributePolicies": {
        "properties": {
          "filters": {
            "items": {
              "$ref": "#/components/schemas/AttributeFilter"
            },
            "title": "@gotags: yaml:\"filters\"",
            "type": "array"
          },
          "selectorLabel": {
            "title": "@gotags: yaml:\"selectorLabel\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthnMethod": {
        "default": "AM_INVALID",
        "enum": [
          "AM_INVALID",
          "OIDC",
          "LDAP"
        ],
        "type": "string"
      },
      "AuthnOIDC": {
        "description": "*\nMessage representing the OIDC authentication parameters.",
        "properties": {
          "callback": {
            "title": "@gotags: yaml:\"callback\"",
            "type": "string"
          },
          "clientId": {
            "title": "@gotags: yaml:\"clientId\"",
            "type": "string"
          },
          "clientSecret": {
            "title": "@gotags: yaml:\"clientSecret\"",
            "type": "string"
          },
          "isAlreadyInSecretBs": {
            "title": "@gotags: yaml:\"isAlreadyInSecretBS\"",
            "type": "boolean"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "vId": {
            "title": "@gotags: yaml:\"vId\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "AuthzAgentActions": {
        "default": "INVALID_AUTHZ_OPERATION",
        "enum": [
          "INVALID_AUTHZ_OPERATION",
          "LIST_ROLES",
          "LIST_ACTIONS",
          "ADD_ROLE",
          "MODIFY_ROLE",
          "REMOVE_ROLE",
          "ADD_MESH_ROLE",
          "MODIFY_MESH_ROLE",
          "REMOVE_MESH_ROLE"
        ],
        "type": "string"
      },
      "AuthzManagerRequest": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AuthzAgentActions"
          },
          "spec": {
            "$ref": "#/components/schemas/VapusRoles"
          }
        },
        "type": "object"
      },
      "AuthzResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/AuthzRoles"
          }
        },
        "type": "object"
      },
      "AuthzRoles": {
        "properties": {
          "roles": {
            "items": {
              "$ref": "#/components/schemas/VapusRoles"
            },
            "title": "@gotags: yaml:\"user\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "AzureCreds": {
        "properties": {
          "clientId": {
            "title": "@gotags: yaml:\"clientId\"",
            "type": "string"
          },
          "clientSecret": {
            "title": "@gotags: yaml:\"clientSecret\"",
            "type": "string"
          },
          "tenantId": {
            "title": "@gotags: yaml:\"tenantId\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BackendStorageOnboarding": {
        "default": "BSO_INVALID",
        "description": "*\nEnum representing the onboarding options for backend storage.",
        "enum": [
          "BSO_INVALID",
          "BSO_INBUILT",
          "BE_BYOS",
          "BE_BUILD",
          "BE_DEFAULT_PLATFORM"
        ],
        "type": "string"
      },
      "BackendStorages": {
        "description": "*\nMessage representing the backend storages.",
        "properties": {
          "besEngine": {
            "$ref": "#/components/schemas/StorageEngine"
          },
          "besOnboarding": {
            "$ref": "#/components/schemas/BackendStorageOnboarding"
          },
          "besService": {
            "$ref": "#/components/schemas/StorageSvc"
          },
          "besType": {
            "$ref": "#/components/schemas/DataSourceType"
          },
          "netParams": {
            "$ref": "#/components/schemas/DataSourceNetParams"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "BaseIdentifier": {
        "properties": {
          "identifier": {
            "title": "@gotags: yaml:\"identifier\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "type": {
            "title": "@gotags: yaml:\"type\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClassifiedTransformer": {
        "properties": {
          "action": {
            "title": "@gotags: yaml:\"action\"",
            "type": "string"
          },
          "entities": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"entities\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "ColumnProperties": {
        "properties": {
          "condition": {
            "title": "@gotags: yaml:\"condition\"",
            "type": "string"
          },
          "conditionOperator": {
            "title": "@gotags: yaml:\"conditionOperator\"",
            "type": "string"
          },
          "conditionVal": {
            "title": "@gotags: yaml:\"conditionVal\"",
            "type": "string"
          },
          "dataTable": {
            "title": "@gotags: yaml:\"dataTable\"",
            "type": "string"
          },
          "entities": {
            "title": "@gotags: yaml:\"entities\"",
            "type": "string"
          },
          "label": {
            "title": "@gotags: yaml:\"label\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "newValue": {
            "title": "@gotags: yaml:\"newValue\"",
            "type": "string"
          },
          "position": {
            "title": "@gotags: yaml:\"position\"",
            "type": "string"
          },
          "value": {
            "title": "@gotags: yaml:\"value\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ColumnTransformer": {
        "properties": {
          "add": {
            "items": {
              "$ref": "#/components/schemas/ColumnProperties"
            },
            "title": "@gotags: yaml:\"add\"",
            "type": "array"
          },
          "drop": {
            "items": {
              "$ref": "#/components/schemas/ColumnProperties"
            },
            "title": "@gotags: yaml:\"drop\"",
            "type": "array"
          },
          "groupBy": {
            "items": {
              "$ref": "#/components/schemas/ColumnProperties"
            },
            "title": "@gotags: yaml:\"groupBy\"",
            "type": "array"
          },
          "rename": {
            "items": {
              "$ref": "#/components/schemas/ColumnProperties"
            },
            "title": "@gotags: yaml:\"rename\"",
            "type": "array"
          },
          "update": {
            "items": {
              "$ref": "#/components/schemas/ColumnProperties"
            },
            "title": "@gotags: yaml:\"update\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "ComplianceFieldType": {
        "default": "INVALID_CF_TYPE",
        "enum": [
          "INVALID_CF_TYPE",
          "PII_FIELD"
        ],
        "type": "string"
      },
      "ComplianceFields": {
        "properties": {
          "complianceTypes": {
            "items": {
              "$ref": "#/components/schemas/ComplianceTypes"
            },
            "title": "@gotags: yaml:\"complianceTypes\"",
            "type": "array"
          },
          "currentFirstRecordAt": {
            "format": "int64",
            "title": "@gotags: yaml:\"currentFirstRecordAt\"",
            "type": "string"
          },
          "dataTable": {
            "title": "@gotags: yaml:\"dataTable\"",
            "type": "string"
          },
          "database": {
            "title": "@gotags: yaml:\"database\"",
            "type": "string"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "fieldType": {
            "$ref": "#/components/schemas/ComplianceFieldType"
          },
          "latestRecordAt": {
            "format": "int64",
            "title": "@gotags: yaml:\"latestRecordAt\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "priority": {
            "format": "int64",
            "title": "@gotags: yaml:\"priority\"",
            "type": "string"
          },
          "schema": {
            "title": "@gotags: yaml:\"schema\"",
            "type": "string"
          },
          "totalEntries": {
            "format": "int64",
            "title": "@gotags: yaml:\"totalEntries\"",
            "type": "string"
          },
          "totalNullEntries": {
            "format": "int64",
            "title": "@gotags: yaml:\"totalNullEntries\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ComplianceLineage": {
        "properties": {
          "complianceOwner": {
            "title": "@gotags: yaml:\"complianceOwner\"",
            "type": "string"
          },
          "complianceStatus": {
            "$ref": "#/components/schemas/ComplianceStatus"
          },
          "complianceTypes": {
            "items": {
              "$ref": "#/components/schemas/ComplianceTypes"
            },
            "title": "@gotags: yaml:\"complianceTypes\"",
            "type": "array"
          },
          "dataEntities": {
            "items": {
              "$ref": "#/components/schemas/ComplianceFields"
            },
            "title": "@gotags: yaml:\"dataEntities\"",
            "type": "array"
          },
          "lastAuditedAt": {
            "format": "int64",
            "title": "@gotags: yaml:\"last_auditedAt\"",
            "type": "string"
          },
          "nextAuditDue": {
            "format": "int64",
            "title": "@gotags: yaml:\"nextAuditDue\"",
            "type": "string"
          },
          "requirementDetails": {
            "title": "@gotags: yaml:\"requirementDetails\"",
            "type": "string"
          },
          "retention": {
            "items": {
              "$ref": "#/components/schemas/RetentionPolicy"
            },
            "title": "@gotags: yaml:\"retention\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "CompliancePrinciple": {
        "properties": {
          "allowedRoles": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"allowedRoles\"",
            "type": "array"
          },
          "classificationReason": {
            "title": "@gotags: yaml:\"classificationReason\"",
            "type": "string"
          },
          "classifiedAt": {
            "format": "int64",
            "title": "@gotags: yaml:\"classifiedAt\"",
            "type": "string"
          },
          "classifiedBy": {
            "title": "@gotags: yaml:\"classifiedBy\"",
            "type": "string"
          },
          "entityName": {
            "title": "@gotags: yaml:\"entityName\"",
            "type": "string"
          },
          "retention": {
            "$ref": "#/components/schemas/RetentionPolicy"
          },
          "sensitivityLevel": {
            "$ref": "#/components/schemas/DataSensitivityClassification"
          }
        },
        "type": "object"
      },
      "ComplianceSmmary": {
        "properties": {
          "principles": {
            "items": {
              "$ref": "#/components/schemas/CompliancePrinciple"
            },
            "title": "@gotags: yaml:\"principles\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "ComplianceStatus": {
        "default": "NON_COMPLIANT",
        "enum": [
          "NON_COMPLIANT",
          "COMPLIANT",
          "UNDER_REVIEW"
        ],
        "type": "string"
      },
      "ComplianceTypes": {
        "default": "INVALID_COMPLIANCE_RULE",
        "enum": [
          "INVALID_COMPLIANCE_RULE",
          "GDPR",
          "HIPAA"
        ],
        "type": "string"
      },
      "ConfigureRequest": {
        "properties": {
          "spec": {
            "items": {
              "$ref": "#/components/schemas/DataProduct"
            },
            "title": "@gotags: yaml:\"spec\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "Constraints": {
        "properties": {
          "constraintName": {
            "title": "@gotags: yaml:\"constraintName\"",
            "type": "string"
          },
          "constraintType": {
            "title": "@gotags: yaml:\"constraintType\"",
            "type": "string"
          },
          "enforced": {
            "title": "@gotags: yaml:\"enforced\"",
            "type": "boolean"
          },
          "fieldName": {
            "title": "@gotags: yaml:\"fieldName\"",
            "type": "string"
          },
          "schema": {
            "title": "@gotags: yaml:\"schema\"",
            "type": "string"
          },
          "tableName": {
            "title": "@gotags: yaml:\"tableName\"",
            "type": "string"
          },
          "targetColumn": {
            "title": "@gotags: yaml:\"targetColumn\"",
            "type": "string"
          },
          "targetTable": {
            "title": "@gotags: yaml:\"targetTable\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CredentialSalt": {
        "description": "*\n@message\nRepresents the credential salt value.",
        "properties": {
          "saltVal": {
            "title": "@gotags: yaml:\"saltVal\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DMResponse": {
        "properties": {
          "agents": {
            "items": {
              "$ref": "#/components/schemas/AgentShort"
            },
            "title": "@gotags: yaml:\"agents\"",
            "type": "array"
          },
          "customMessage": {
            "items": {
              "$ref": "#/components/schemas/MapList"
            },
            "title": "@gotags: yaml:\"customMessage\"",
            "type": "array"
          },
          "dmStatusCode": {
            "title": "@gotags: yaml:\"dmStatusCode\"",
            "type": "string"
          },
          "message": {
            "title": "@gotags: yaml:\"message\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataCatalog": {
        "properties": {
          "dataCatalogId": {
            "title": "@gotags: yaml:\"dataCatalogId\"",
            "type": "string"
          },
          "dataProducts": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"dataProducts\"",
            "type": "array"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "displayName": {
            "title": "@gotags: yaml:\"displayName\"",
            "type": "string"
          },
          "domainId": {
            "title": "@gotags: yaml:\"domainId\"",
            "type": "string"
          },
          "meshId": {
            "title": "@gotags: yaml:\"meshId\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataCatalogAgentActions": {
        "default": "GET_OWN_CATALOG",
        "enum": [
          "GET_OWN_CATALOG",
          "LIST_OWN_CATALOG_DATAPRODUCTS"
        ],
        "type": "string"
      },
      "DataCatalogManagerRequest": {
        "properties": {
          "actions": {
            "items": {
              "$ref": "#/components/schemas/DataCatalogAgentActions"
            },
            "title": "@gotags: yaml:\"actions\"",
            "type": "array"
          },
          "dataCatalogQuery": {
            "$ref": "#/components/schemas/SearchParam"
          },
          "dataProductgQuery": {
            "$ref": "#/components/schemas/SearchParam"
          },
          "newDataProductRequest": {
            "$ref": "#/components/schemas/NewDataProductRequest"
          }
        },
        "type": "object"
      },
      "DataCatalogResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/DcResponseOutput"
          }
        },
        "type": "object"
      },
      "DataComplianceManagerRequest": {
        "properties": {
          "fileFormat": {
            "$ref": "#/components/schemas/CompliancePrinciple"
          }
        },
        "type": "object"
      },
      "DataComplianceResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "items": {
              "$ref": "#/components/schemas/ComplianceSmmary"
            },
            "title": "@gotags: yaml:\"output\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataFields": {
        "description": "*\nMessage representing the fields in a data table.",
        "properties": {
          "default": {
            "title": "@gotags: yaml:\"default\"",
            "type": "string"
          },
          "extra": {
            "title": "@gotags: yaml:\"extra\"",
            "type": "string"
          },
          "field": {
            "title": "@gotags: yaml:\"field\"",
            "type": "string"
          },
          "key": {
            "title": "@gotags: yaml:\"key\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "null": {
            "title": "@gotags: yaml:\"null\"",
            "type": "string"
          },
          "type": {
            "title": "@gotags: yaml:\"type\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataGovernance": {
        "description": "*\nMessage for defining data governance policies.",
        "properties": {
          "accessPolicies": {
            "$ref": "#/components/schemas/AccessControlPolicy"
          },
          "attributePolicies": {
            "items": {
              "$ref": "#/components/schemas/AttributePolicies"
            },
            "title": "@gotags: yaml:\"attributePolicies\"",
            "type": "array"
          },
          "datatablePolicies": {
            "items": {
              "$ref": "#/components/schemas/DataTablePolicies"
            },
            "title": "@gotags: yaml:\"datatablePolicies\"",
            "type": "array"
          },
          "transformerPolicies": {
            "items": {
              "$ref": "#/components/schemas/DataProductTransformer"
            },
            "title": "@gotags: yaml:\"transformerPolicies\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataMesh": {
        "description": "*\nMessage representing a datamesh.",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/DataMeshAttributes"
          },
          "displayName": {
            "title": "@gotags: yaml:\"displayName\"",
            "type": "string"
          },
          "enableAutoDataSoruceGovernance": {
            "title": "@gotags: yaml:\"enableAutoDataSoruceGovernance\"",
            "type": "boolean"
          },
          "federatedCatalog": {
            "title": "@gotags: yaml:\"federatedCatalog\"",
            "type": "string"
          },
          "meshId": {
            "title": "@gotags: yaml:\"meshId\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataMeshAgentActions": {
        "default": "INVALID_DATAMESH_ACTION",
        "enum": [
          "INVALID_DATAMESH_ACTION",
          "CONFIGURE_DATAMESH",
          "LIST_DATAMESH",
          "LIST_DATAMESH_CATALOGS",
          "LIST_DATAMESH_DATAPRODUCTS",
          "LIST_ACCESSIBLE_DATAPRODUCTS",
          "LIST_CATALOG_DATAPRODUCTS",
          "ACCESS_DATAPRODUCT",
          "DESCRIBE_DATAMESH_PRODUCT"
        ],
        "type": "string"
      },
      "DataMeshAttributes": {
        "description": "*\n@message\nRepresents the attributes of a datamesh.",
        "properties": {
          "artifactGrid": {
            "$ref": "#/components/schemas/ArtifactGrid"
          },
          "generateNewJwt": {
            "title": "@gotags: yaml:\"generateNewJwt\"",
            "type": "boolean"
          },
          "meshAccessJwt": {
            "$ref": "#/components/schemas/JWTParams"
          },
          "needArtifactGrid": {
            "title": "@gotags: yaml:\"needArtifactGrid\"",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "DataMeshManagerRequest": {
        "description": "*\nThe DataMeshManagerRequest message contains the information required to manage a data mesh.",
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/DataMeshAgentActions"
          },
          "spec": {
            "$ref": "#/components/schemas/DataMesh"
          }
        },
        "type": "object"
      },
      "DataMeshOutput": {
        "properties": {
          "dataCatalogs": {
            "items": {
              "$ref": "#/components/schemas/DataCatalog"
            },
            "title": "@gotags: yaml:\"dataCatalogs\"",
            "type": "array"
          },
          "dataProducts": {
            "items": {
              "$ref": "#/components/schemas/DataProduct"
            },
            "title": "@gotags: yaml:\"dataProducts\"",
            "type": "array"
          },
          "datamesh": {
            "items": {
              "$ref": "#/components/schemas/DataMesh"
            },
            "title": "@gotags: yaml:\"datamesh\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataMeshResponse": {
        "description": "*\nThe DataMeshResponse message contains the response to a data mesh creation or retrieval request.",
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/DataMeshOutput"
          }
        },
        "type": "object"
      },
      "DataProduct": {
        "description": "*\nMessage for defining a data product.",
        "properties": {
          "artifacts": {
            "items": {
              "$ref": "#/components/schemas/PlatformArtifact"
            },
            "title": "@gotags: yaml:\"artifacts\"",
            "type": "array"
          },
          "catalog": {
            "title": "@gotags: yaml:\"catalog\"",
            "type": "string"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"categories\"",
            "type": "array"
          },
          "contract": {
            "$ref": "#/components/schemas/DataProductContract"
          },
          "dataProductId": {
            "title": "@gotags: yaml:\"dataProductId\"",
            "type": "string"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "labels": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"labels\"",
            "type": "array"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "productOwners": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"productOwners\"",
            "type": "array"
          },
          "productType": {
            "$ref": "#/components/schemas/DataProductType"
          },
          "relatedDataProducts": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"relatedDataProducts\"",
            "type": "array"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourceAttributes"
          },
          "specDigest": {
            "$ref": "#/components/schemas/DigestVal"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"tags\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataProductAccessPolicy": {
        "default": "DP_READER",
        "description": "*\nEnum for the access policies of a data product.",
        "enum": [
          "DP_READER",
          "DP_WRITER",
          "DP_OWNER"
        ],
        "type": "string"
      },
      "DataProductAgentActions": {
        "default": "INVALID_DATAPRODUCT_ACTION",
        "enum": [
          "INVALID_DATAPRODUCT_ACTION",
          "CONFIGURE_DATAPRODUCT",
          "LIST_DATAPRODUCT",
          "PATCH_DATAPRODUCT",
          "DRYRUN_DATAPRODUCT",
          "DESCRIBE_DATAPRODUCT",
          "PUBLISH_DATAPRODUCT",
          "UNPUBLISH_DATAPRODUCT",
          "ARCHIVE_DATAPRODUCT",
          "VALIDATE_DATAPRODUCT"
        ],
        "type": "string"
      },
      "DataProductConfigureRequest": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/DataProductServerAgentAction"
          },
          "spec": {
            "description": "@gotags: yaml:\"spec\"",
            "items": {
              "$ref": "#/components/schemas/DataProduct"
            },
            "title": "DataProduct specifications",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataProductConfigureResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          }
        },
        "type": "object"
      },
      "DataProductContract": {
        "description": "*\nMessage for defining a data product specification.",
        "properties": {
          "compliances": {
            "$ref": "#/components/schemas/ComplianceLineage"
          },
          "governance": {
            "$ref": "#/components/schemas/DataGovernance"
          },
          "interface": {
            "$ref": "#/components/schemas/DataProductInterface"
          },
          "ioPorts": {
            "$ref": "#/components/schemas/DataProductIO"
          },
          "lineage": {
            "$ref": "#/components/schemas/DataProductLineage"
          },
          "producers": {
            "items": {
              "$ref": "#/components/schemas/ProductDataSource"
            },
            "title": "@gotags: yaml:\"producers\"",
            "type": "array"
          },
          "readiness": {
            "$ref": "#/components/schemas/Readiness"
          },
          "schemas": {
            "items": {
              "$ref": "#/components/schemas/DataStoreSchema"
            },
            "title": "@gotags: yaml:\"schemas\"",
            "type": "array"
          },
          "version": {
            "title": "@gotags: yaml:\"version\"",
            "type": "string"
          },
          "workers": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"workers\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataProductDryRunRequest": {
        "properties": {
          "dataProduct": {
            "type": "string"
          },
          "inputQuery": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataProductDryRunResponse": {
        "properties": {
          "response": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataProductGovernancePolicies": {
        "default": "INVALID_POLICY",
        "description": "*\nEnum for the governance policies of a data product.",
        "enum": [
          "INVALID_POLICY",
          "ACCESS_CONTROL"
        ],
        "type": "string"
      },
      "DataProductIO": {
        "properties": {
          "artifacts": {
            "items": {
              "$ref": "#/components/schemas/PlatformArtifact"
            },
            "title": "@gotags: yaml:\"artifacts\"",
            "type": "array"
          },
          "inputPorts": {
            "items": {
              "$ref": "#/components/schemas/ProductDataSource"
            },
            "title": "@gotags: yaml:\"inputPorts\"",
            "type": "array"
          },
          "productOutputPorts": {
            "items": {
              "$ref": "#/components/schemas/ProductOutputPorts"
            },
            "title": "@gotags: yaml:\"productOutputPorts\"",
            "type": "array"
          },
          "queryPrompts": {
            "items": {
              "$ref": "#/components/schemas/QueryPrompts"
            },
            "title": "@gotags: yaml:\"queryPrompts\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataProductInterface": {
        "default": "INVALID_INTERFACE",
        "description": "*\nEnum for the interface types of a data product.",
        "enum": [
          "INVALID_INTERFACE",
          "API",
          "FILE",
          "API_WITH_LLM",
          "CONTAINER"
        ],
        "type": "string"
      },
      "DataProductLineage": {
        "properties": {
          "dataWorkers": {
            "items": {
              "$ref": "#/components/schemas/DataProductWorkers"
            },
            "title": "@gotags: yaml:\"dataWorkers\"",
            "type": "array"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "versionLineage": {
            "items": {
              "$ref": "#/components/schemas/DataProductVersionMap"
            },
            "title": "@gotags: yaml:\"versionLineage\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataProductManagerRequest": {
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/DataProductAgentActions"
          },
          "backwardCompatibleVersions": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "dataRules": {
            "items": {
              "$ref": "#/components/schemas/DataRule"
            },
            "type": "array"
          },
          "meshIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "spec": {
            "$ref": "#/components/schemas/DataProduct"
          },
          "versionBumpType": {
            "$ref": "#/components/schemas/VersionBumpType"
          }
        },
        "type": "object"
      },
      "DataProductOutput": {
        "properties": {
          "dataProducts": {
            "items": {
              "$ref": "#/components/schemas/DataProduct"
            },
            "type": "array"
          },
          "fileFormat": {
            "$ref": "#/components/schemas/FileFormats"
          },
          "fileSpec": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataProductServerAgentAction": {
        "default": "ADD_POOL_ITEM",
        "enum": [
          "ADD_POOL_ITEM",
          "REMOVE_POOL_ITEM"
        ],
        "type": "string"
      },
      "DataProductServerRequest": {
        "properties": {
          "dataProductId": {
            "type": "string"
          },
          "query": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataProductServerResponse": {
        "properties": {
          "output": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataProductTransformer": {
        "properties": {
          "selectorLabel": {
            "title": "@gotags: yaml:\"selectorLabel\"",
            "type": "string"
          },
          "transformers": {
            "$ref": "#/components/schemas/Transformer"
          }
        },
        "type": "object"
      },
      "DataProductType": {
        "default": "MESH_PRODUCT",
        "enum": [
          "MESH_PRODUCT",
          "FEDERATED_PRODUCT",
          "PRIVATE_PRODUCT"
        ],
        "type": "string"
      },
      "DataProductUserRole": {
        "description": "*\nMessage for defining data product user roles and their access policies.",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/DataProductAccessPolicy"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "roles": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"roles\"",
            "type": "array"
          },
          "selectorLabel": {
            "title": "@gotags: yaml:\"selectorLabel\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataProductUsers": {
        "description": "*\nMessage for defining data product user and their access policies.",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/DataProductAccessPolicy"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "selectorLabel": {
            "title": "@gotags: yaml:\"selectorLabel\"",
            "type": "string"
          },
          "users": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"users\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataProductVersionMap": {
        "properties": {
          "addedOn": {
            "format": "int64",
            "title": "@gotags: yaml:\"addedOn\"",
            "type": "string"
          },
          "backwardCompatibleVersions": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"backwardCompatibleVersions\"",
            "type": "array"
          },
          "diff": {
            "title": "@gotags: yaml:\"diff\"",
            "type": "string"
          },
          "digest": {
            "$ref": "#/components/schemas/DigestVal"
          },
          "isLatest": {
            "title": "@gotags: yaml:\"isLatest\"",
            "type": "boolean"
          },
          "version": {
            "title": "@gotags: yaml:\"version\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataProductWorkers": {
        "properties": {
          "schedule": {
            "$ref": "#/components/schemas/SyncSchedule"
          },
          "specDigest": {
            "$ref": "#/components/schemas/DigestVal"
          },
          "workerId": {
            "title": "@gotags: yaml:\"workerId\"",
            "type": "string"
          },
          "workerSpec": {
            "title": "@gotags: yaml:\"workerSpec\"",
            "type": "string"
          },
          "workerSpecFormat": {
            "title": "@gotags: yaml:\"workerSpecFormat\"",
            "type": "string"
          },
          "workerType": {
            "title": "@gotags: yaml:\"workerType\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataProductsResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/DataProductOutput"
          }
        },
        "type": "object"
      },
      "DataRule": {
        "properties": {
          "dataSource": {
            "type": "string"
          },
          "dataTables": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "database": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          },
          "selectorLabel": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "syncSchedule": {
            "$ref": "#/components/schemas/SyncSchedule"
          }
        },
        "type": "object"
      },
      "DataSensitivityClassification": {
        "default": "PUBLIC",
        "enum": [
          "PUBLIC",
          "PII",
          "CONFIDENTIAL",
          "SENSITIVE"
        ],
        "type": "string"
      },
      "DataSource": {
        "description": "*\n@message\nRepresents a data source in the Vapus Data Platform system.",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/DataSourceAttributes"
          },
          "autoDiscoverComplianceFields": {
            "title": "@gotags: yaml:\"autoDiscoverComplianceFields\"",
            "type": "boolean"
          },
          "complianceFields": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"complianceFields\"",
            "type": "array"
          },
          "dataSourceId": {
            "title": "@gotags: yaml:\"dataSourceId\"",
            "type": "string"
          },
          "dataSourceType": {
            "$ref": "#/components/schemas/DataSourceType"
          },
          "meshId": {
            "title": "@gotags: yaml:\"meshId\"",
            "type": "string"
          },
          "metaSyncSchedule": {
            "$ref": "#/components/schemas/SyncSchedule"
          },
          "metadata": {
            "items": {
              "$ref": "#/components/schemas/SourceMetaData"
            },
            "title": "@gotags: yaml:\"metadata\"",
            "type": "array"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "netParams": {
            "$ref": "#/components/schemas/DataSourceNetParams"
          },
          "ownerDomain": {
            "title": "@gotags: yaml:\"ownerDomain\"",
            "type": "string"
          },
          "owners": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"owners\"",
            "type": "array"
          },
          "sharable": {
            "title": "@gotags: yaml:\"sharable\"",
            "type": "boolean"
          },
          "sharingParams": {
            "$ref": "#/components/schemas/DataSourceSharingParams"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"tags\"",
            "type": "array"
          },
          "vapusQueryServerUris": {
            "additionalProperties": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"vapusQueryServerUris\"",
            "type": "object"
          }
        },
        "type": "object"
      },
      "DataSourceAccessScope": {
        "default": "DSCAS_READ",
        "description": "*\n@enum\nEnumerates the access scopes for a data source.",
        "enum": [
          "DSCAS_READ",
          "DSCAS_WRITE",
          "DSCAS_ADMIN"
        ],
        "type": "string"
      },
      "DataSourceAgentActions": {
        "default": "INVALID_DATASOURCE_ACTION",
        "enum": [
          "INVALID_DATASOURCE_ACTION",
          "CONFIGURE_DATASOURCE",
          "CRAWL_DATASOURCE",
          "LIST_DATASOURCE",
          "DESCRIBE_DATASOURCE"
        ],
        "type": "string"
      },
      "DataSourceAttributes": {
        "description": "*\n@message\nRepresents the attributes of a data source.",
        "properties": {
          "goal": {
            "$ref": "#/components/schemas/DataSourceGoal"
          },
          "serviceName": {
            "$ref": "#/components/schemas/StorageSvc"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/SvcProvider"
          },
          "storageEngine": {
            "$ref": "#/components/schemas/StorageEngine"
          },
          "supportedArtifactTypes": {
            "items": {
              "$ref": "#/components/schemas/ArtifactTypes"
            },
            "title": "@gotags: yaml:\"supportedArtifactTypes\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataSourceCrawlParams": {
        "properties": {
          "cloudServiceProvider": {
            "$ref": "#/components/schemas/SvcProvider"
          },
          "credentials": {
            "$ref": "#/components/schemas/GenericCredentialObj"
          },
          "ignoreServices": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"ignoreServices\"",
            "type": "array"
          },
          "listOnly": {
            "title": "@gotags: yaml:\"listOnly\"",
            "type": "boolean"
          },
          "services": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"services\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataSourceCreds": {
        "description": "*\n@message\nRepresents the credentials of a data source.",
        "properties": {
          "accessScope": {
            "$ref": "#/components/schemas/DataSourceAccessScope"
          },
          "credentials": {
            "$ref": "#/components/schemas/GenericCredentialObj"
          },
          "db": {
            "title": "@gotags: yaml:\"db\"",
            "type": "string"
          },
          "isAlreadyInSecretBs": {
            "title": "@gotags: yaml:\"isAlreadyInSecretBS\"",
            "type": "boolean"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "priority": {
            "format": "int32",
            "title": "@gotags: yaml:\"priority\"",
            "type": "integer"
          },
          "secretName": {
            "title": "@gotags: yaml:\"secretName\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataSourceGoal": {
        "default": "DSG_APPLICATION_DATA",
        "description": "*\n@enum\nEnumerates the goals of a data source.",
        "enum": [
          "DSG_APPLICATION_DATA",
          "DSG_INDEXING",
          "DSG_CACHING",
          "DSG_KEYVALUE",
          "DSG_VECTOR",
          "DSG_PACKAGES",
          "DSG_FILES",
          "DSG_SECRETS",
          "DSG_DATA_CATALOG",
          "DSG_DATA_STREAM"
        ],
        "type": "string"
      },
      "DataSourceManagerRequest": {
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/DataSourceAgentActions"
          },
          "crawlerSpec": {
            "description": "@gotags: yaml:\"crawlerSpec\"",
            "items": {
              "$ref": "#/components/schemas/DataSourceCrawlParams"
            },
            "title": "The list of data source crawl parameters",
            "type": "array"
          },
          "governanceOutputFormat": {
            "$ref": "#/components/schemas/FileFormats"
          },
          "spec": {
            "$ref": "#/components/schemas/DataSource"
          }
        },
        "type": "object"
      },
      "DataSourceMetaData": {
        "description": "*\nMessage representing the metadata for a data source.",
        "properties": {
          "dataSource": {
            "$ref": "#/components/schemas/BaseIdentifier"
          },
          "dataType": {
            "$ref": "#/components/schemas/DataSourceType"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "domain": {
            "$ref": "#/components/schemas/BaseIdentifier"
          },
          "lineage": {
            "items": {
              "$ref": "#/components/schemas/MetaDataLineage"
            },
            "title": "@gotags: yaml:\"lineage\"",
            "type": "array"
          },
          "metadataId": {
            "title": "@gotags: yaml:\"metadataId\"",
            "type": "string"
          },
          "sourceSchemas": {
            "items": {
              "$ref": "#/components/schemas/DataStoreSchema"
            },
            "title": "@gotags: yaml:\"sourceSchemas\"",
            "type": "array"
          },
          "storageEngine": {
            "title": "@gotags: yaml:\"storageEngine\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataSourceMetaDataResponse": {
        "description": "*\n@typedef MetaDataResponse\n@property {models.v1alpha1.DMResponse} dm_resp - The response from the data management service.\n@property {Array\u003cmodels.v1alpha1.DataSourceMetaData\u003e} output - The list of metadata for the data source.",
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "items": {
              "$ref": "#/components/schemas/DataSourceMetaData"
            },
            "title": "@gotags: yaml:\"output\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataSourceMetadataAgentActions": {
        "default": "INVALID_DATASOURCE_METADATA_ACTION",
        "enum": [
          "INVALID_DATASOURCE_METADATA_ACTION",
          "SET_FREQUENCY",
          "DESCRIBE_DATASOURCE_METADATA",
          "RUN_COLLECTOR",
          "LIST_DATASOURCE_METADATA",
          "GENERATE_DESCRIPTIONS"
        ],
        "type": "string"
      },
      "DataSourceMetadataManagerRequest": {
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/DataSourceMetadataAgentActions"
          },
          "governanceOutputFormat": {
            "$ref": "#/components/schemas/FileFormats"
          },
          "spec": {
            "$ref": "#/components/schemas/DataSourceMetaData"
          }
        },
        "type": "object"
      },
      "DataSourceMetadataResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/MetadataOutput"
          }
        },
        "type": "object"
      },
      "DataSourceNetParams": {
        "description": "*\n@message\nRepresents the network parameters of a data source.",
        "properties": {
          "address": {
            "title": "@gotags: yaml:\"address\"",
            "type": "string"
          },
          "databasePrefixes": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"databasePrefixes\"",
            "type": "array"
          },
          "databases": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"databases\"",
            "type": "array"
          },
          "dsCreds": {
            "items": {
              "$ref": "#/components/schemas/DataSourceCreds"
            },
            "title": "@gotags: yaml:\"dsCreds\"",
            "type": "array"
          },
          "port": {
            "format": "int32",
            "title": "@gotags: yaml:\"port\"",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DataSourceOutput": {
        "properties": {
          "dataSources": {
            "items": {
              "$ref": "#/components/schemas/DataSource"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataSourceResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/DataSourceOutput"
          }
        },
        "type": "object"
      },
      "DataSourceSharingParams": {
        "description": "*\n@message\nRepresents the sharing parameters for a data source.",
        "properties": {
          "accessScope": {
            "$ref": "#/components/schemas/DataSourceAccessScope"
          },
          "domainId": {
            "title": "@gotags: yaml:\"domainId\"",
            "type": "string"
          },
          "validFrom": {
            "format": "int32",
            "title": "@gotags: yaml:\"validFrom\"",
            "type": "integer"
          },
          "validTill": {
            "format": "int32",
            "title": "@gotags: yaml:\"validTill\"",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "DataSourceType": {
        "default": "INVALID_DST",
        "description": "*\n@enum\nEnumerates the types of content in data sources.",
        "enum": [
          "INVALID_DST",
          "DSDT_DATABASE",
          "DSDT_ARTIFACT",
          "DSDT_DATA_STREAM",
          "DSDT_VECTOR",
          "DSDT_ENDPOINTS",
          "DSDT_SECRETS"
        ],
        "type": "string"
      },
      "DataStoreSchema": {
        "description": "*\nMessage representing the data schema for a data source.",
        "properties": {
          "complianceFields": {
            "items": {
              "$ref": "#/components/schemas/ComplianceFields"
            },
            "title": "@gotags: yaml:\"complianceFields\"",
            "type": "array"
          },
          "constraints": {
            "items": {
              "$ref": "#/components/schemas/Constraints"
            },
            "title": "@gotags: yaml:\"constraints\"",
            "type": "array"
          },
          "dataTables": {
            "items": {
              "$ref": "#/components/schemas/DataTables"
            },
            "title": "@gotags: yaml:\"dataTables\"",
            "type": "array"
          },
          "datastore": {
            "title": "@gotags: yaml:\"datastore\"",
            "type": "string"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "metaSchemas": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"metaSchemas\"",
            "type": "array"
          },
          "trinoCatalog": {
            "title": "@gotags: yaml:\"trinoCatalog\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataTablePolicies": {
        "properties": {
          "datatableUris": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"datatableUris\"",
            "type": "array"
          },
          "selectorLabel": {
            "title": "@gotags: yaml:\"selectorLabel\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataTables": {
        "description": "*\nMessage representing the data tables in a data schema.",
        "properties": {
          "averageRowLength": {
            "format": "uint64",
            "title": "@gotags: yaml:\"averageRowLength\"",
            "type": "string"
          },
          "createdAt": {
            "format": "uint64",
            "title": "@gotags: yaml:\"CreatedAt\"",
            "type": "string"
          },
          "dataLength": {
            "format": "uint64",
            "title": "@gotags: yaml:\"dataLength\"",
            "type": "string"
          },
          "engine": {
            "title": "@gotags: yaml:\"engine\"",
            "type": "string"
          },
          "fedTableName": {
            "title": "@gotags: yaml:\"fedTableName\"",
            "type": "string"
          },
          "fields": {
            "items": {
              "$ref": "#/components/schemas/DataFields"
            },
            "title": "@gotags: yaml:\"fields\"",
            "type": "array"
          },
          "generalUri": {
            "title": "@gotags: yaml:\"generalUri\"",
            "type": "string"
          },
          "indexLength": {
            "format": "uint64",
            "title": "@gotags: yaml:\"indexLength\"",
            "type": "string"
          },
          "lastUpdatedAt": {
            "format": "uint64",
            "title": "@gotags: yaml:\"lastUpdatedAt\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "nature": {
            "$ref": "#/components/schemas/TableNature"
          },
          "schema": {
            "title": "@gotags: yaml:\"schema\"",
            "type": "string"
          },
          "tableType": {
            "title": "@gotags: yaml:\"tableType\"",
            "type": "string"
          },
          "totalRows": {
            "format": "uint64",
            "title": "@gotags: yaml:\"totalRows\"",
            "type": "string"
          },
          "totalSize": {
            "format": "uint64",
            "title": "@gotags: yaml:\"totalSize\"",
            "type": "string"
          },
          "vapusQueryServerUri": {
            "title": "@gotags: yaml:\"vapusQueryServerUri\"",
            "type": "string"
          },
          "version": {
            "title": "@gotags: yaml:\"version\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataWorkerAgentActions": {
        "default": "INVALID_DATAWORKER_ACTION",
        "enum": [
          "INVALID_DATAWORKER_ACTION",
          "CONFIGURE_DATAWORKER",
          "LIST_DATAWORKER",
          "DELETE_DATAWORKER",
          "DRYRUN_DATAWORKER",
          "DESCRIBE_DATAWORKER",
          "BUILD_DATAWORKER"
        ],
        "type": "string"
      },
      "DataWorkerDeployment": {
        "properties": {
          "artifact": {
            "$ref": "#/components/schemas/PlatformArtifact"
          },
          "artifactPullSecrets": {
            "title": "@gotags: yaml:\"artifactPullSecrets\"",
            "type": "string"
          },
          "dataWorkerId": {
            "title": "@gotags: yaml:\"dataWorkerId\"",
            "type": "string"
          },
          "deployedAt": {
            "format": "int64",
            "title": "@gotags: yaml:\"deployedAt\"",
            "type": "string"
          },
          "deploymentId": {
            "title": "@gotags: yaml:\"deploymentId\"",
            "type": "string"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "infraId": {
            "title": "@gotags: yaml:\"infraId\"",
            "type": "string"
          },
          "isLatest": {
            "title": "@gotags: yaml:\"isLatest\"",
            "type": "boolean"
          },
          "log": {
            "title": "@gotags: yaml:\"log\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "namespace": {
            "title": "@gotags: yaml:\"namespace\"",
            "type": "string"
          },
          "runType": {
            "$ref": "#/components/schemas/DataWorkerRunType"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "workerDeploymentSpec": {
            "$ref": "#/components/schemas/WorkerK8SDeploymentSpec"
          }
        },
        "type": "object"
      },
      "DataWorkerDeploymentAgentAction": {
        "default": "INVALID_DATAWORKER_DEPLOYMENT_ACTION",
        "enum": [
          "INVALID_DATAWORKER_DEPLOYMENT_ACTION",
          "DEPLOY_DATAWORKER",
          "RESUME_DATAWORKER",
          "PAUSE_DATAWORKER",
          "LIST_WORKER_DEPLOYMENTS",
          "DESCRIBE_WORKER_DEPLOYMENTS",
          "PRUNE_DATAWORKER",
          "PACKAGE_DATAWORKER"
        ],
        "type": "string"
      },
      "DataWorkerDeploymentManagerRequest": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/DataWorkerDeploymentAgentAction"
          },
          "spec": {
            "$ref": "#/components/schemas/DataWorkerDeployment"
          }
        },
        "type": "object"
      },
      "DataWorkerDeploymentResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "items": {
              "$ref": "#/components/schemas/DataWorkerDeployment"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataWorkerDryRunRequest": {
        "properties": {
          "dataWorker": {
            "type": "string"
          },
          "inputQuery": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataWorkerDryRunResponse": {
        "properties": {
          "response": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataWorkerLineage": {
        "properties": {
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "lastRecordId": {
            "title": "@gotags: yaml:\"lastRecordId\"",
            "type": "string"
          },
          "lastRecordTimestamp": {
            "title": "@gotags: yaml:\"lastRecordTimestamp\"",
            "type": "string"
          },
          "lastRunId": {
            "title": "@gotags: yaml:\"lastRunAt\"",
            "type": "string"
          },
          "lastSyncAt": {
            "format": "int64",
            "title": "@gotags: yaml:\"lastSyncAt\"",
            "type": "string"
          },
          "lastSyncStatus": {
            "title": "@gotags: yaml:\"lastSyncStatus\"",
            "type": "string"
          },
          "totalRecords": {
            "format": "int64",
            "title": "@gotags: yaml:\"totalRecords\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DataWorkerManagerRequest": {
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/DataWorkerAgentActions"
          },
          "spec": {
            "$ref": "#/components/schemas/VapusDataWorker"
          }
        },
        "type": "object"
      },
      "DataWorkerMetadata": {
        "description": "*\nMessage for defining a data worker metaData.",
        "properties": {
          "artifacts": {
            "items": {
              "$ref": "#/components/schemas/PlatformArtifact"
            },
            "title": "@gotags: yaml:\"artifacts\"",
            "type": "array"
          },
          "lastDeploymentId": {
            "title": "@gotags: yaml:\"lastDeploymentId\"",
            "type": "string"
          },
          "lineage": {
            "items": {
              "$ref": "#/components/schemas/DataWorkerLineage"
            },
            "title": "@gotags: yaml:\"lineage\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataWorkerOutput": {
        "properties": {
          "dataWorkers": {
            "items": {
              "$ref": "#/components/schemas/VapusDataWorker"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "DataWorkerResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/DataWorkerOutput"
          }
        },
        "type": "object"
      },
      "DataWorkerRunType": {
        "default": "INVALID_ETL_RUNTYPE",
        "enum": [
          "INVALID_ETL_RUNTYPE",
          "ONE_TIME_JOB",
          "CRONJOB"
        ],
        "type": "string"
      },
      "DataworkerVdcAssociation": {
        "properties": {
          "dataProductId": {
            "title": "@gotags: yaml:\"dataProductId\"",
            "type": "string"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DcResponseOutput": {
        "properties": {
          "dataCatalogs": {
            "items": {
              "$ref": "#/components/schemas/DataCatalog"
            },
            "title": "@gotags: yaml:\"dataCatalogs\"",
            "type": "array"
          },
          "dataProducts": {
            "items": {
              "$ref": "#/components/schemas/DataProduct"
            },
            "title": "@gotags: yaml:\"dataProducts\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DigestVal": {
        "properties": {
          "algo": {
            "$ref": "#/components/schemas/HashAlgos"
          },
          "digest": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "DiscoverSourceMetaDataRequest": {
        "description": "*\n@typedef DiscoverSourceMetaDataRequest\n@property {string} database - The name of the database.\n@property {string} table - The name of the table.\n@property {string} fields - The list of fields to retrieve.\n@property {domain} fields - The domain to retrieve.\n@property {string} q - The query string for searching metadata.",
        "properties": {
          "database": {
            "title": "@gotags: yaml:\"database\"",
            "type": "string"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "fields": {
            "title": "@gotags: yaml:\"fields\"",
            "type": "string"
          },
          "q": {
            "title": "@gotags: yaml:\"q\"",
            "type": "string"
          },
          "table": {
            "title": "@gotags: yaml:\"table\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Domain": {
        "description": "*\n@message\nRepresents a domain in the Vapus Data Platform system.",
        "properties": {
          "artifactStorage": {
            "$ref": "#/components/schemas/BackendStorages"
          },
          "attributes": {
            "$ref": "#/components/schemas/DomainAttributes"
          },
          "backendSecretStorage": {
            "$ref": "#/components/schemas/BackendStorages"
          },
          "catalogIndex": {
            "title": "@gotags: yaml:\"CatalogIndex\"",
            "type": "string"
          },
          "dataCatalog": {
            "items": {
              "$ref": "#/components/schemas/DataCatalog"
            },
            "title": "@gotags: yaml:\"dataCatalog\"",
            "type": "array"
          },
          "dataProductInfraPlatform": {
            "items": {
              "$ref": "#/components/schemas/K8SInfraParams"
            },
            "title": "@gotags: yaml:\"dataProductInfraPlatform\"",
            "type": "array"
          },
          "dataRules": {
            "$ref": "#/components/schemas/DomainDataRules"
          },
          "dataSources": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"dataSources\"",
            "type": "array"
          },
          "displayName": {
            "title": "@gotags: yaml:\"displayName\"",
            "type": "string"
          },
          "domainArtifacts": {
            "items": {
              "$ref": "#/components/schemas/DomainArtifacts"
            },
            "title": "@gotags: yaml:\"domainArtifacts\"",
            "type": "array"
          },
          "domainId": {
            "title": "@gotags: yaml:\"domainId\"",
            "type": "string"
          },
          "domainType": {
            "$ref": "#/components/schemas/DomainType"
          },
          "meshId": {
            "title": "@gotags: yaml:\"meshId\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "secretPasscode": {
            "$ref": "#/components/schemas/CredentialSalt"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "users": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"users\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DomainAgentActions": {
        "default": "INVALID_DOMAIN_ACTION",
        "enum": [
          "INVALID_DOMAIN_ACTION",
          "CONFIGURE_DOMAIN",
          "DELETE_DOMAIN",
          "UPGRADE_DOMAIN_ARTIFACTS",
          "ADD_DOMAIN_USERS",
          "REMOVE_DOMAIN_USERS",
          "LIST_DOMAIN_USERS",
          "LIST_DOMAINS",
          "ATTACH_TO_MESH",
          "MANAGE_DEPLOYMENT_INFRA",
          "DESCRIBE_DOMAIN"
        ],
        "type": "string"
      },
      "DomainArtifacts": {
        "properties": {
          "artifactType": {
            "title": "@gotags: yaml:\"artifactType\"",
            "type": "string"
          },
          "artifacts": {
            "items": {
              "$ref": "#/components/schemas/PlatformArtifact"
            },
            "title": "@gotags: yaml:\"artifacts\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DomainAttributes": {
        "description": "*\n@message\nRepresents the attributes of a domain.",
        "properties": {
          "authnJwtParams": {
            "$ref": "#/components/schemas/JWTParams"
          }
        },
        "type": "object"
      },
      "DomainDataRules": {
        "description": "*\n@message\nRepresents the data rules of a domain.",
        "properties": {
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DomainManagerRequest": {
        "description": "*\n@typedef {Object} ManageDomainRequest\n@property {DomainAgentActions} actions - The actions to perform on the domain.\n@property {models.v1alpha1.Domain} spec - The request body containing the domain details.",
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/DomainAgentActions"
          },
          "spec": {
            "$ref": "#/components/schemas/Domain"
          },
          "users": {
            "description": "@gotags: yaml:\"users\"",
            "items": {
              "$ref": "#/components/schemas/DomainUserOps"
            },
            "title": "The list of domain user operations",
            "type": "array"
          }
        },
        "type": "object"
      },
      "DomainOutput": {
        "properties": {
          "domains": {
            "description": "@gotags: yaml:\"domains\"",
            "items": {
              "$ref": "#/components/schemas/Domain"
            },
            "title": "The list of domains",
            "type": "array"
          },
          "users": {
            "description": "@gotags: yaml:\"users\"",
            "items": {
              "$ref": "#/components/schemas/DomainUsers"
            },
            "title": "The list of domain users",
            "type": "array"
          }
        },
        "title": "The list of domains",
        "type": "object"
      },
      "DomainResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/DomainOutput"
          }
        },
        "type": "object"
      },
      "DomainType": {
        "default": "CONSUMER_DOMAIN",
        "enum": [
          "CONSUMER_DOMAIN",
          "SERVICE_DOMAIN",
          "DATA_DOMAIN"
        ],
        "type": "string"
      },
      "DomainUserOps": {
        "properties": {
          "added": {
            "title": "@gotags: yaml:\"added\"",
            "type": "boolean"
          },
          "inviteIfNotFound": {
            "title": "@gotags: yaml:\"inviteIfNotfound\"",
            "type": "boolean"
          },
          "role": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"role\"",
            "type": "array"
          },
          "userId": {
            "title": "@gotags: yaml:\"userId\"",
            "type": "string"
          },
          "validTill": {
            "format": "int64",
            "title": "@gotags: yaml:\"validTill\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DomainUsers": {
        "properties": {
          "domain": {
            "description": "@gotags: yaml:\"domain\"",
            "title": "The domain",
            "type": "string"
          },
          "users": {
            "description": "@gotags: yaml:\"users\"",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "title": "The list of users",
            "type": "array"
          }
        },
        "title": "The list of domain users",
        "type": "object"
      },
      "EmbeddingTransformer": {
        "properties": {
          "embeddingAlgo": {
            "title": "@gotags: yaml:\"embeddingAlgo\"",
            "type": "string"
          },
          "label": {
            "title": "@gotags: yaml:\"label\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "EmptyRequest": {
        "type": "object"
      },
      "EncryptionAlgo": {
        "default": "JSA_INVALID",
        "enum": [
          "JSA_INVALID",
          "ED25519",
          "ECDSA",
          "RSA"
        ],
        "type": "string"
      },
      "ExtractedDataCustomQuery": {
        "properties": {
          "batchSize": {
            "format": "int64",
            "title": "@gotags: yaml:\"batchSize\"",
            "type": "string"
          },
          "dataTables": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"dataTables\"",
            "type": "array"
          },
          "distinctField": {
            "title": "@gotags: yaml:\"distinctField\"",
            "type": "string"
          },
          "fields": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"fields\"",
            "type": "array"
          },
          "limit": {
            "format": "int64",
            "title": "@gotags: yaml:\"limit\"",
            "type": "string"
          },
          "orderBy": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"orderBy\"",
            "type": "array"
          },
          "queryCondition": {
            "title": "@gotags: yaml:\"queryCondition\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtractionDataRule": {
        "properties": {
          "customQueryParam": {
            "$ref": "#/components/schemas/ExtractedDataCustomQuery"
          },
          "dataBase": {
            "title": "@gotags: yaml:\"dataBase\"",
            "type": "string"
          },
          "rawQuery": {
            "$ref": "#/components/schemas/RawQueryOpts"
          },
          "schema": {
            "title": "@gotags: yaml:\"schema\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ExtractionRule": {
        "properties": {
          "dataRule": {
            "$ref": "#/components/schemas/ExtractionDataRule"
          },
          "dataSource": {
            "title": "@gotags: yaml:\"dataSource\"",
            "type": "string"
          },
          "inputFromLabel": {
            "title": "@gotags: yaml:\"inputFromLabel\"",
            "type": "string"
          },
          "label": {
            "title": "@gotags: yaml:\"label\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FileFormats": {
        "default": "YAML",
        "enum": [
          "YAML",
          "JSON",
          "TOML"
        ],
        "type": "string"
      },
      "Frequency": {
        "default": "INVALID_FREQUENCY",
        "description": "*\nEnum representing the retention frequency for data compliance.",
        "enum": [
          "INVALID_FREQUENCY",
          "MONTH",
          "WEEK",
          "YEAR",
          "HOUR",
          "MINUTES",
          "SECONDS",
          "DAY"
        ],
        "type": "string"
      },
      "GCPCreds": {
        "properties": {
          "base64Encoded": {
            "title": "@gotags: yaml:\"base64Encoded\"",
            "type": "boolean"
          },
          "projectId": {
            "title": "@gotags: yaml:\"projectId\"",
            "type": "string"
          },
          "region": {
            "title": "@gotags: yaml:\"region\"",
            "type": "string"
          },
          "serviceAccountKey": {
            "title": "@gotags: yaml:\"serviceAccountKey\"",
            "type": "string"
          },
          "zone": {
            "title": "@gotags: yaml:\"zone\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GenerativePromptParams": {
        "properties": {
          "contextParams": {
            "$ref": "#/components/schemas/TemplateInstruct"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "promptId": {
            "title": "@gotags: yaml:\"promptId\"",
            "type": "string"
          },
          "promptName": {
            "title": "@gotags: yaml:\"promptName\"",
            "type": "string"
          },
          "promptOwner": {
            "title": "@gotags: yaml:\"promptOwner\"",
            "type": "string"
          },
          "resultParams": {
            "$ref": "#/components/schemas/TemplateInstruct"
          },
          "systemMessage": {
            "title": "@gotags: yaml:\"systemMessage\"",
            "type": "string"
          },
          "tagParams": {
            "$ref": "#/components/schemas/TemplateInstruct"
          },
          "userInstructions": {
            "title": "@gotags: yaml:\"userInstructions\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GenericCredentialObj": {
        "properties": {
          "apiToken": {
            "title": "@gotags: yaml:\"apiToken\"",
            "type": "string"
          },
          "apiTokenType": {
            "$ref": "#/components/schemas/ApiTokenType"
          },
          "awsCreds": {
            "$ref": "#/components/schemas/AWSCreds"
          },
          "azureCreds": {
            "$ref": "#/components/schemas/AzureCreds"
          },
          "gcpCreds": {
            "$ref": "#/components/schemas/GCPCreds"
          },
          "password": {
            "title": "@gotags: yaml:\"password\"",
            "type": "string"
          },
          "username": {
            "title": "@gotags: yaml:\"username\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GlobalTransformer": {
        "properties": {
          "classified": {
            "items": {
              "$ref": "#/components/schemas/ClassifiedTransformer"
            },
            "title": "@gotags: yaml:\"classified\"",
            "type": "array"
          },
          "useDeclared": {
            "title": "@gotags: yaml:\"useDeclared\"",
            "type": "boolean"
          },
          "vars": {
            "items": {
              "$ref": "#/components/schemas/GlobalVarTransformer"
            },
            "title": "@gotags: yaml:\"vars\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "GlobalVarTransformer": {
        "properties": {
          "condition": {
            "title": "@gotags: yaml:\"condition\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "HashAlgos": {
        "default": "INVALID_HASH_ALGO",
        "enum": [
          "INVALID_HASH_ALGO",
          "SHA_256"
        ],
        "type": "string"
      },
      "InfraService": {
        "default": "INVALID_INFRA",
        "enum": [
          "INVALID_INFRA",
          "GKE",
          "EKS",
          "AKS"
        ],
        "type": "string"
      },
      "JWTParams": {
        "properties": {
          "generateInPlatform": {
            "title": "@gotags: yaml:\"generateInPlatform\"",
            "type": "boolean"
          },
          "isAlreadyInSecretBs": {
            "title": "@gotags: yaml:\"isAlreadyInSecretBS\"",
            "type": "boolean"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "privateJwtKey": {
            "title": "@gotags: yaml:\"privateJWTKey\"",
            "type": "string"
          },
          "publicJwtKey": {
            "title": "@gotags: yaml:\"publicJWTKey\"",
            "type": "string"
          },
          "signingAlgorithm": {
            "$ref": "#/components/schemas/EncryptionAlgo"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "vId": {
            "title": "Ignore in Requests",
            "type": "string"
          }
        },
        "type": "object"
      },
      "K8SInfraParams": {
        "properties": {
          "credentials": {
            "$ref": "#/components/schemas/GenericCredentialObj"
          },
          "displayName": {
            "title": "@gotags: yaml:\"displayName\"",
            "type": "string"
          },
          "infraId": {
            "title": "@gotags: yaml:\"infraId\"",
            "type": "string"
          },
          "infraService": {
            "$ref": "#/components/schemas/InfraService"
          },
          "isDefault": {
            "title": "@gotags: yaml:\"isDefault\"",
            "type": "boolean"
          },
          "kubeConfig": {
            "title": "@gotags: yaml:\"kubeConfig\"",
            "type": "string"
          },
          "kubeConfigFormat": {
            "$ref": "#/components/schemas/FileFormats"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "secretName": {
            "title": "@gotags: yaml:\"secretName\"",
            "type": "string"
          },
          "serviceProvider": {
            "$ref": "#/components/schemas/SvcProvider"
          }
        },
        "type": "object"
      },
      "K8SServiceType": {
        "default": "CLUSTERIP",
        "enum": [
          "CLUSTERIP",
          "LOADBALANCER",
          "NODEPORT",
          "HEADLESS",
          "EXTERNALNAME"
        ],
        "type": "string"
      },
      "LoadingDataRule": {
        "properties": {
          "batchSize": {
            "format": "int64",
            "title": "@gotags: yaml:\"batchSize\"",
            "type": "string"
          },
          "batchWait": {
            "format": "int64",
            "title": "@gotags: yaml:\"batchWait\"",
            "type": "string"
          },
          "createTables": {
            "title": "@gotags: yaml:\"createTables\"",
            "type": "boolean"
          },
          "dataBase": {
            "title": "@gotags: yaml:\"dataBase\"",
            "type": "string"
          },
          "dataTables": {
            "additionalProperties": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"dataTables\"",
            "type": "object"
          },
          "generateSchemaByPlatform": {
            "title": "@gotags: yaml:\"generateSchemaByPlatform\"",
            "type": "boolean"
          },
          "schema": {
            "title": "@gotags: yaml:\"schema\"",
            "type": "string"
          },
          "schemaQueries": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"schemaQueries\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "LoadingRule": {
        "properties": {
          "dataRule": {
            "$ref": "#/components/schemas/LoadingDataRule"
          },
          "dataSource": {
            "title": "@gotags: yaml:\"dataSource\"",
            "type": "string"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "labels": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"labels\"",
            "type": "array"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoginCallBackRequest": {
        "properties": {
          "code": {
            "title": "@gotags: yaml:\"code\"",
            "type": "string"
          },
          "host": {
            "title": "@gotags: yaml:\"host\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LoginHandlerResponse": {
        "properties": {
          "callbackUrl": {
            "title": "@gotags: yaml:\"callbackURL\"",
            "type": "string"
          },
          "loginUrl": {
            "title": "@gotags: yaml:\"loginURL\"",
            "type": "string"
          },
          "redirectUri": {
            "title": "@gotags: yaml:\"redirectURI\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ManageStatusAction": {
        "default": "INVALID_ACTION",
        "enum": [
          "INVALID_ACTION",
          "STOP",
          "START",
          "SYNC"
        ],
        "type": "string"
      },
      "ManageStatusRequest": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ManageStatusAction"
          }
        },
        "type": "object"
      },
      "ManageStatusResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          }
        },
        "type": "object"
      },
      "MapList": {
        "properties": {
          "key": {
            "title": "@gotags: yaml:\"key\"",
            "type": "string"
          },
          "values": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"values\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "Mapper": {
        "properties": {
          "key": {
            "title": "@gotags: yaml:\"key\"",
            "type": "string"
          },
          "value": {
            "title": "@gotags: yaml:\"value\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetaDataLineage": {
        "properties": {
          "digest": {
            "$ref": "#/components/schemas/DigestVal"
          },
          "isLatest": {
            "title": "@gotags: yaml:\"isLatest\"",
            "type": "boolean"
          },
          "metadataDiff": {
            "title": "@gotags: yaml:\"metadataDiff\"",
            "type": "string"
          },
          "syncAt": {
            "format": "int64",
            "title": "@gotags: yaml:\"syncAt\"",
            "type": "string"
          },
          "workflowId": {
            "title": "@gotags: yaml:\"workflowId\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "MetadataOutput": {
        "properties": {
          "metadata": {
            "items": {
              "$ref": "#/components/schemas/DataSourceMetaData"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "MetricsObj": {
        "properties": {
          "metrics": {
            "items": {
              "type": "object"
            },
            "title": "@gotags: yaml:\"metrics\"",
            "type": "array"
          },
          "resource": {
            "title": "@gotags: yaml:\"resource\"",
            "type": "string"
          },
          "resourceId": {
            "title": "@gotags: yaml:\"resourceId\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ModelPromptManagerRequest": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/AIPromptLCAction"
          },
          "spec": {
            "$ref": "#/components/schemas/GenerativePromptParams"
          }
        },
        "type": "object"
      },
      "ModelPromptManagerResponse": {
        "properties": {
          "promptName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "NewDataProductRequest": {
        "properties": {
          "dataCatalogId": {
            "title": "@gotags: yaml:\"dataCatalogId\"",
            "type": "string"
          },
          "fileFormat": {
            "$ref": "#/components/schemas/FileFormats"
          },
          "fileSpec": {
            "title": "@gotags: yaml:\"fileSpec\"",
            "type": "string"
          },
          "text": {
            "title": "@gotags: yaml:\"text\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "NodeManagerResponse": {
        "properties": {
          "agentMetadata": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"agentMetadata\"",
            "type": "array"
          },
          "response": {
            "items": {
              "$ref": "#/components/schemas/AIModelResult"
            },
            "title": "@gotags: yaml:\"response\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "NullValue": {
        "default": "NULL_VALUE",
        "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value.",
        "enum": [
          "NULL_VALUE"
        ],
        "type": "string"
      },
      "ObservabilityAgentReflexes": {
        "default": "INVALID_OBSERVABILITY",
        "enum": [
          "INVALID_OBSERVABILITY",
          "LIST_DATAPRODUCT_CONSUMPTION_METRICES"
        ],
        "type": "string"
      },
      "ObservabilityManagerRequest": {
        "properties": {
          "reflexes": {
            "$ref": "#/components/schemas/ObservabilityAgentReflexes"
          },
          "searchParam": {
            "$ref": "#/components/schemas/SearchParam"
          }
        },
        "type": "object"
      },
      "ObservabilityManagerResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/ObservabilityOutput"
          }
        },
        "type": "object"
      },
      "ObservabilityOutput": {
        "properties": {
          "rawConsumptionMetrics": {
            "items": {
              "$ref": "#/components/schemas/MetricsObj"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "OrderBys": {
        "default": "ASC",
        "enum": [
          "ASC",
          "DESC"
        ],
        "type": "string"
      },
      "PlatformArtifact": {
        "properties": {
          "addedOn": {
            "format": "int64",
            "title": "@gotags: yaml:\"addedOn\"",
            "type": "string"
          },
          "artifact": {
            "title": "@gotags: yaml:\"artifact\"",
            "type": "string"
          },
          "digest": {
            "title": "@gotags: yaml:\"digest\"",
            "type": "string"
          },
          "isLatest": {
            "title": "@gotags: yaml:\"isLatest\"",
            "type": "boolean"
          },
          "tag": {
            "title": "@gotags: yaml:\"tag\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PlatformServicesRequest": {
        "type": "object"
      },
      "PlatformServicesResponse": {
        "properties": {
          "networkParams": {
            "items": {
              "$ref": "#/components/schemas/SvcNetworkParams"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PlatformUserRoles": {
        "default": "ANONYMOUS",
        "enum": [
          "ANONYMOUS",
          "PLATFORM_OWNERS",
          "PLATFORM_OPERATORS",
          "DOMAIN_OWNERS",
          "DOMAIN_USERS",
          "PLATFORM_USERS"
        ],
        "type": "string"
      },
      "ProductDataRules": {
        "properties": {
          "database": {
            "title": "@gotags: yaml:\"database\"",
            "type": "string"
          },
          "schema": {
            "title": "@gotags: yaml:\"schema\"",
            "type": "string"
          },
          "selectorLabel": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"selectorLabel,omitempty\"",
            "type": "array"
          },
          "syncSchedule": {
            "$ref": "#/components/schemas/SyncSchedule"
          },
          "tables": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"tables\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "ProductDataSource": {
        "properties": {
          "datarules": {
            "$ref": "#/components/schemas/ProductDataRules"
          },
          "name": {
            "title": "@gotags: yaml:\"name,omitempty\"",
            "type": "string"
          },
          "ownerDomain": {
            "title": "@gotags: yaml:\"ownerDomain,omitempty\"",
            "type": "string"
          },
          "service": {
            "title": "@gotags: yaml:\"service,omitempty\"",
            "type": "string"
          },
          "serviceEngine": {
            "title": "@gotags: yaml:\"serviceEngine,omitempty\"",
            "type": "string"
          },
          "serviceProvider": {
            "title": "@gotags: yaml:\"serviceProvider,omitempty\"",
            "type": "string"
          },
          "sourceId": {
            "title": "@gotags: yaml:\"sourceId,omitempty\"",
            "type": "string"
          },
          "sourceType": {
            "title": "@gotags: yaml:\"sourceType,omitempty\"",
            "type": "string"
          },
          "sourceUri": {
            "title": "@gotags: yaml:\"sourceUri,omitempty\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ProductOutputPorts": {
        "properties": {
          "endpoint": {
            "title": "@gotags: yaml:\"endpoint\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "params": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"params\"",
            "type": "array"
          },
          "queryPrompts": {
            "items": {
              "$ref": "#/components/schemas/QueryPrompts"
            },
            "title": "@gotags: yaml:\"queryPrompts\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "QueryPrompts": {
        "properties": {
          "query": {
            "title": "@gotags: yaml:\"query\"",
            "type": "string"
          },
          "schemas": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"schemas\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "RawQueryOpts": {
        "properties": {
          "batchSize": {
            "format": "int64",
            "title": "@gotags: yaml:\"batchSize\"",
            "type": "string"
          },
          "dataTables": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"dataTables\"",
            "type": "array"
          },
          "rawQuery": {
            "title": "@gotags: yaml:\"rawQuery\"",
            "type": "string"
          },
          "textQuery": {
            "title": "@gotags: yaml:\"textQuery\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Readiness": {
        "properties": {
          "endOfLife": {
            "format": "int64",
            "title": "@gotags: yaml:\"endOfLife\"",
            "type": "string"
          },
          "endOfSupport": {
            "format": "int64",
            "title": "@gotags: yaml:\"endOfSupport\"",
            "type": "string"
          },
          "isReady": {
            "title": "@gotags: yaml:\"isReady\"",
            "type": "boolean"
          },
          "sla": {
            "title": "@gotags: yaml:\"sla\"",
            "type": "string"
          },
          "timeOfAvailability": {
            "format": "int64",
            "title": "@gotags: yaml:\"timeOfAvailability\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RequestObjects": {
        "default": "INVALID_REQUEST_OBJECT",
        "enum": [
          "INVALID_REQUEST_OBJECT",
          "ALL",
          "VAPUS_DATAPRODUCTS",
          "VAPUS_DATAWORKERS",
          "VAPUS_DATASOURCES",
          "VAPUS_DATASOURCE_CREDS",
          "VAPUS_DOMAINS",
          "VAPUS_DATA_CONTAINER_DEPLOYMENTS",
          "VAPUS_AIMODEL_NODES",
          "VAPUS_DATAMESH",
          "VAPUS_DATA_WORKER_DEPLOYMENTS",
          "VAPUS_ACCOUNT"
        ],
        "type": "string"
      },
      "ResourceAttributes": {
        "properties": {
          "documents": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"documents\"",
            "type": "array"
          },
          "images": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"images\"",
            "type": "array"
          },
          "weblinks": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"webLinks\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "ResourceConfigs": {
        "properties": {
          "fileContent": {
            "title": "@gotags: yaml:\"fileContent\"",
            "type": "string"
          },
          "format": {
            "$ref": "#/components/schemas/FileFormats"
          },
          "requestObj": {
            "$ref": "#/components/schemas/RequestObjects"
          }
        },
        "type": "object"
      },
      "RetentionPolicy": {
        "properties": {
          "deletionMethod": {
            "title": "@gotags: yaml:\"deletionMethod\"",
            "type": "string"
          },
          "entityType": {
            "title": "@gotags: yaml:\"entityType\"",
            "type": "string"
          },
          "retentionPeriod": {
            "$ref": "#/components/schemas/SyncSchedule"
          }
        },
        "type": "object"
      },
      "RowProperties": {
        "properties": {
          "condition": {
            "title": "@gotags: yaml:\"condition\"",
            "type": "string"
          },
          "conditionOperator": {
            "title": "@gotags: yaml:\"conditionOperator\"",
            "type": "string"
          },
          "conditionVal": {
            "title": "@gotags: yaml:\"conditionVal\"",
            "type": "string"
          },
          "dataTable": {
            "title": "@gotags: yaml:\"dataTable\"",
            "type": "string"
          },
          "entity": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"entity\"",
            "type": "array"
          },
          "label": {
            "title": "@gotags: yaml:\"label\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "value": {
            "title": "@gotags: yaml:\"value\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "RowTransformer": {
        "properties": {
          "drop": {
            "items": {
              "$ref": "#/components/schemas/RowProperties"
            },
            "title": "@gotags: yaml:\"drop\"",
            "type": "array"
          },
          "update": {
            "items": {
              "$ref": "#/components/schemas/RowProperties"
            },
            "title": "@gotags: yaml:\"update\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "SSLCerts": {
        "properties": {
          "isAlreadyInSecretBs": {
            "title": "@gotags: yaml:\"isAlreadyInSecretBS\"",
            "type": "boolean"
          },
          "sslCert": {
            "title": "@gotags: yaml:\"sslCert\"",
            "type": "string"
          },
          "sslKey": {
            "title": "@gotags: yaml:\"sslKey\"",
            "type": "string"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "vId": {
            "title": "Ignore in Requests",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SampleResourceConfiguration": {
        "properties": {
          "output": {
            "items": {
              "$ref": "#/components/schemas/ResourceConfigs"
            },
            "title": "@gotags: yaml:\"output\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "SampleResourceConfigurationOptions": {
        "properties": {
          "format": {
            "$ref": "#/components/schemas/FileFormats"
          },
          "populateFakeData": {
            "title": "@gotags: yaml:\"populateFakeData\"",
            "type": "boolean"
          },
          "requestObj": {
            "$ref": "#/components/schemas/RequestObjects"
          }
        },
        "type": "object"
      },
      "SearchParam": {
        "properties": {
          "filters": {
            "items": {
              "$ref": "#/components/schemas/MapList"
            },
            "title": "@gotags: yaml:\"filters\"",
            "type": "array"
          },
          "q": {
            "title": "@gotags: yaml:\"q\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SourceMetaData": {
        "properties": {
          "artifactSource": {
            "$ref": "#/components/schemas/ArtifactSourceMetaData"
          },
          "dataSource": {
            "$ref": "#/components/schemas/DataSourceMetaData"
          }
        },
        "type": "object"
      },
      "Status": {
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "items": {
              "$ref": "#/components/schemas/Any"
            },
            "type": "array"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "StorageEngine": {
        "default": "INVALID_DS_SERVICE_TYPE",
        "description": "*\n@enum\nEnumerates the storage engines supported by the Vapus Data Platform system.",
        "enum": [
          "INVALID_DS_SERVICE_TYPE",
          "MYSQL",
          "REDIS",
          "ELASTICSEARCH",
          "MONGODB",
          "SECRET_MANAGER",
          "HASHICORPVAULT",
          "POSTGRES",
          "OCI",
          "PYPI",
          "BLOB",
          "KAFKA_QUEUE",
          "RABBITMQ",
          "RESTAPI",
          "GRPC",
          "AWS_VAULT",
          "GCP_VAULT",
          "AZURE_VAULT",
          "BIGQUERY",
          "SNOWFLAKE",
          "SQL_SERVER",
          "OPENSEARCH",
          "HIVE",
          "ICEBERG",
          "CLICKHOUSE",
          "MARIADB",
          "DYNAMODB",
          "ORACLE",
          "SINGLE_STORE",
          "CASSANDRA"
        ],
        "type": "string"
      },
      "StorageSvc": {
        "default": "INVALID_DS_SERVICE",
        "description": "*\n@enum\nEnumerates the storage services supported by the Vapus Data Platform system.",
        "enum": [
          "INVALID_DS_SERVICE",
          "RDS",
          "GAR",
          "ECR",
          "AWS_OPENSEARCH",
          "AWS_ELASTICCACHE",
          "AWS_SECRET_MANAGER",
          "HASHICORP_VAULT",
          "ELASTICSEARCH_CLOUD",
          "MONGODB_ATLAS",
          "AWS_DOCUMENTDB",
          "SELF_HOSTED",
          "AWS_GLUE",
          "AWS_S3",
          "GCP_CLOUD_STORAGE",
          "AWS_KMS",
          "GCP_KMS",
          "AZURE_KMS",
          "GCP_SECRET_MANAGER",
          "AZURE_SECRET_MANAGER",
          "REDIS_ENTERPRISE",
          "SQSSNS",
          "KAFKA",
          "GCP_CLOUD_SQL"
        ],
        "type": "string"
      },
      "StoreDMSecretsRequest": {
        "description": "*\nThe StoreDMSecretsRequest message contains the information required to store data mesh secrets.",
        "properties": {
          "cData": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"cData\"",
            "type": "array"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "vPath": {
            "title": "@gotags: yaml:\"vPath\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StoreDMSecretsResponse": {
        "description": "*\nThe StoreDMSecretsResponse message contains the response to a data mesh secrets storage request.",
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "vPath": {
            "title": "@gotags: yaml:\"vPath\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SvcNetworkParams": {
        "properties": {
          "port": {
            "format": "int64",
            "title": "@gotags: yaml:\"port\"",
            "type": "string"
          },
          "svcAddr": {
            "title": "@gotags: yaml:\"svcAddr\"",
            "type": "string"
          },
          "svcName": {
            "title": "@gotags: yaml:\"svcName\"",
            "type": "string"
          },
          "svcTag": {
            "$ref": "#/components/schemas/VapusSvcs"
          }
        },
        "type": "object"
      },
      "SvcProvider": {
        "default": "INVALID_SSP",
        "description": "*\n@enum\nEnumerates the service providers supported by the Vapus Data Platform system.",
        "enum": [
          "INVALID_SSP",
          "SSP_ON_PREM",
          "SSP_INTERNAL_HOSTED",
          "SSP_ES",
          "SSP_GCP",
          "SSP_AWS",
          "SSP_AZURE",
          "SSP_MONGO",
          "SSP_REDIS",
          "SSP_OPENAI",
          "SSP_META",
          "SSP_OTHERS"
        ],
        "type": "string"
      },
      "SyncSchedule": {
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/Frequency"
          },
          "limit": {
            "format": "int64",
            "title": "@gotags: yaml:\"limit\"",
            "type": "string"
          },
          "value": {
            "format": "int64",
            "title": "@gotags: yaml:\"value\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TableNature": {
        "default": "TABLE",
        "enum": [
          "TABLE",
          "INDEX",
          "COLLECTION",
          "KEY"
        ],
        "type": "string"
      },
      "TemplateInstruct": {
        "properties": {
          "endTag": {
            "title": "@gotags: yaml:\"endTag\"",
            "type": "string"
          },
          "infoText": {
            "title": "@gotags: yaml:\"infoText\"",
            "type": "string"
          },
          "startTag": {
            "title": "@gotags: yaml:\"startTag\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Transformer": {
        "properties": {
          "embeddingTransformers": {
            "items": {
              "$ref": "#/components/schemas/EmbeddingTransformer"
            },
            "title": "@gotags: yaml:\"embeddingTransformers\"",
            "type": "array"
          },
          "globals": {
            "$ref": "#/components/schemas/GlobalTransformer"
          },
          "scripts": {
            "items": {
              "$ref": "#/components/schemas/TransformerScript"
            },
            "title": "@gotags: yaml:\"scripts\"",
            "type": "array"
          },
          "steps": {
            "items": {
              "$ref": "#/components/schemas/TransformerSteps"
            },
            "title": "@gotags: yaml:\"steps\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "TransformerScript": {
        "properties": {
          "location": {
            "title": "@gotags: yaml:\"location\"",
            "type": "string"
          },
          "password": {
            "title": "@gotags: yaml:\"password\"",
            "type": "string"
          },
          "scriptCmd": {
            "title": "@gotags: yaml:\"scriptCmd\"",
            "type": "string"
          },
          "token": {
            "title": "@gotags: yaml:\"token\"",
            "type": "string"
          },
          "username": {
            "title": "@gotags: yaml:\"username\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "TransformerSteps": {
        "properties": {
          "column": {
            "$ref": "#/components/schemas/ColumnTransformer"
          },
          "row": {
            "$ref": "#/components/schemas/RowTransformer"
          },
          "stepId": {
            "title": "@gotags: yaml:\"stepId\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "User": {
        "properties": {
          "displayName": {
            "title": "@gotags: yaml:\"displayName\"",
            "type": "string"
          },
          "domainRoles": {
            "$ref": "#/components/schemas/UserDomainRole"
          },
          "email": {
            "title": "@gotags: yaml:\"email\"",
            "type": "string"
          },
          "firstName": {
            "title": "@gotags: yaml:\"firstName\"",
            "type": "string"
          },
          "inviteExpiresOn": {
            "format": "int64",
            "title": "@gotags: yaml:\"inviteExpiresOn\"",
            "type": "string"
          },
          "inviteId": {
            "title": "@gotags: yaml:\"inviteId\"",
            "type": "string"
          },
          "invitedOn": {
            "format": "int64",
            "title": "@gotags: yaml:\"invitedOn\"",
            "type": "string"
          },
          "invitedType": {
            "$ref": "#/components/schemas/UserInviteType"
          },
          "lastName": {
            "title": "@gotags: yaml:\"lastName\"",
            "type": "string"
          },
          "platformPolicies": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"platformPolicies\"",
            "type": "array"
          },
          "platformRole": {
            "$ref": "#/components/schemas/PlatformUserRoles"
          },
          "profile": {
            "$ref": "#/components/schemas/UserProfile"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "userId": {
            "title": "@gotags: yaml:\"userId\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserAgentActions": {
        "default": "INVALID_USER_OPERATION",
        "enum": [
          "INVALID_USER_OPERATION",
          "GET_USER",
          "INVITE_USERS",
          "LIST_USERS",
          "LIST_PLATFORM_USERS",
          "SELF_SIGNUP",
          "REMOVE_USER",
          "PATCH_USER"
        ],
        "type": "string"
      },
      "UserDomainRole": {
        "properties": {
          "domainId": {
            "title": "@gotags: yaml:\"domainId\"",
            "type": "string"
          },
          "invitedOn": {
            "format": "int64",
            "title": "@gotags: yaml:\"invitedOn\"",
            "type": "string"
          },
          "isDefault": {
            "title": "@gotags: yaml:\"isDefault\"",
            "type": "boolean"
          },
          "policies": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"policies\"",
            "type": "array"
          },
          "role": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"role\"",
            "type": "array"
          },
          "validTill": {
            "format": "int64",
            "title": "@gotags: yaml:\"validTill\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserInviteType": {
        "default": "REQUEST_ACCESS",
        "enum": [
          "REQUEST_ACCESS",
          "INVITE_ACCESS",
          "PLATFORM_SETUP"
        ],
        "type": "string"
      },
      "UserManagerRequest": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/UserAgentActions"
          },
          "domain": {
            "description": "The domain of the users to manage",
            "title": "User Domain",
            "type": "string"
          },
          "roleArn": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"roleArn\"",
            "type": "array"
          },
          "spec": {
            "$ref": "#/components/schemas/User"
          }
        },
        "type": "object"
      },
      "UserProfile": {
        "properties": {
          "address": {
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "title": "@gotags: yaml:\"address\"",
            "type": "array"
          },
          "avatar": {
            "title": "@gotags: yaml:\"avatar\"",
            "type": "string"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UserResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/VapusUser"
          }
        },
        "type": "object"
      },
      "VDCK8SDeploymentSpec": {
        "properties": {
          "deployment": {
            "title": "@gotags: yaml:\"deployment\"",
            "type": "string"
          },
          "httpPort": {
            "format": "int64",
            "title": "@gotags: yaml:\"httpPort\"",
            "type": "string"
          },
          "nodePort": {
            "format": "int64",
            "title": "@gotags: yaml:\"nodePort\"",
            "type": "string"
          },
          "port": {
            "format": "int64",
            "title": "@gotags: yaml:\"port\"",
            "type": "string"
          },
          "svc": {
            "title": "@gotags: yaml:\"svc\"",
            "type": "string"
          },
          "svcAddress": {
            "title": "@gotags: yaml:\"svcAddress\"",
            "type": "string"
          },
          "svcConfig": {
            "title": "@gotags: yaml:\"svcConfig\"",
            "type": "string"
          },
          "svcPort": {
            "format": "int64",
            "title": "@gotags: yaml:\"svcPort\"",
            "type": "string"
          },
          "svcSecret": {
            "title": "@gotags: yaml:\"svcSecret\"",
            "type": "string"
          },
          "svcType": {
            "$ref": "#/components/schemas/K8SServiceType"
          }
        },
        "type": "object"
      },
      "VDCOrchestrator": {
        "properties": {
          "artifact": {
            "title": "@gotags: yaml:\"artifact\"",
            "type": "string"
          },
          "artifactPullSecrets": {
            "title": "@gotags: yaml:\"artifactPullSecrets\"",
            "type": "string"
          },
          "dataProductId": {
            "title": "@gotags: yaml:\"dataProductId\"",
            "type": "string"
          },
          "deployedAt": {
            "format": "int64",
            "title": "@gotags: yaml:\"deployedAt\"",
            "type": "string"
          },
          "deploymentId": {
            "title": "@gotags: yaml:\"deploymentId\"",
            "type": "string"
          },
          "deploymentSpec": {
            "$ref": "#/components/schemas/VDCK8SDeploymentSpec"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "infraId": {
            "title": "@gotags: yaml:\"infraId\"",
            "type": "string"
          },
          "log": {
            "title": "@gotags: yaml:\"log\"",
            "type": "string"
          },
          "meshId": {
            "title": "@gotags: yaml:\"meshId\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "namespace": {
            "title": "@gotags: yaml:\"namespace\"",
            "type": "string"
          },
          "packageWorker": {
            "title": "@gotags: yaml:\"packageWorker\"",
            "type": "boolean"
          },
          "scope": {
            "$ref": "#/components/schemas/VDCOrchestratorScope"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "svcAuthnSecrets": {
            "title": "@gotags: yaml:\"svcAuthnSecrets\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "VDCOrchestratorAgentAction": {
        "default": "INVALID_VDC_DEPLOYMENT_ACTION",
        "enum": [
          "INVALID_VDC_DEPLOYMENT_ACTION",
          "DEPLOY_VDC",
          "PRUNE_VDC_DEPLOYMENT",
          "STOP_VDC_DEPLOYMENT",
          "LIST_VDC_DEPLOYMENTS",
          "DESCRIBE_VDC_DEPLOYMENT",
          "PACKAGE_VDC"
        ],
        "type": "string"
      },
      "VDCOrchestratorManagerRequest": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/VDCOrchestratorAgentAction"
          },
          "meshId": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "spec": {
            "$ref": "#/components/schemas/VDCOrchestrator"
          }
        },
        "type": "object"
      },
      "VDCOrchestratorResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "items": {
              "$ref": "#/components/schemas/VDCOrchestrator"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "VDCOrchestratorScope": {
        "default": "PLATFORM_DEPLOYMENT",
        "enum": [
          "PLATFORM_DEPLOYMENT",
          "PRIVATE_DEPLOYMENT"
        ],
        "type": "string"
      },
      "VapusDataContainer": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "items": {
              "$ref": "#/components/schemas/DataProduct"
            },
            "title": "@gotags: yaml:\"output\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "VapusDataWorker": {
        "properties": {
          "associatedDataProducts": {
            "items": {
              "$ref": "#/components/schemas/DataworkerVdcAssociation"
            },
            "title": "@gotags: yaml:\"associatedDataProducts\"",
            "type": "array"
          },
          "createdBy": {
            "title": "@gotags: yaml:\"createdBy\"",
            "type": "string"
          },
          "dataWorkerId": {
            "title": "@gotags: yaml:\"dataWorkerId\"",
            "type": "string"
          },
          "dataWorkerType": {
            "title": "@gotags: yaml:\"dataWorkerType\"",
            "type": "string"
          },
          "domain": {
            "title": "@gotags: yaml:\"domain\"",
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/DataWorkerMetadata"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "specDigest": {
            "$ref": "#/components/schemas/DigestVal"
          },
          "status": {
            "title": "@gotags: yaml:\"status\"",
            "type": "string"
          },
          "workerEngine": {
            "$ref": "#/components/schemas/WorkerEngine"
          }
        },
        "type": "object"
      },
      "VapusRoleScope": {
        "default": "DOMAIN_ROLES",
        "enum": [
          "DOMAIN_ROLES",
          "PLATFORM_ROLES",
          "MESH_ROLES"
        ],
        "type": "string"
      },
      "VapusRoles": {
        "properties": {
          "action": {
            "title": "@gotags: yaml:\"action\"",
            "type": "string"
          },
          "arn": {
            "title": "@gotags: yaml:\"arn\"",
            "type": "string"
          },
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/VapusRoleScope"
          }
        },
        "type": "object"
      },
      "VapusSearchItem": {
        "properties": {
          "description": {
            "title": "@gotags: yaml:\"description\"",
            "type": "string"
          },
          "items": {
            "$ref": "#/components/schemas/BaseIdentifier"
          }
        },
        "type": "object"
      },
      "VapusSearchRequest": {
        "properties": {
          "q": {
            "title": "@gotags: yaml:\"q\"",
            "type": "string"
          },
          "searchParam": {
            "$ref": "#/components/schemas/SearchParam"
          },
          "searchType": {
            "$ref": "#/components/schemas/VapusSearchType"
          }
        },
        "type": "object"
      },
      "VapusSearchResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/VapusSearchItem"
            },
            "title": "@gotags: yaml:\"results\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "VapusSearchType": {
        "default": "DATAPRODUCTS",
        "enum": [
          "DATAPRODUCTS",
          "DATASOURCES"
        ],
        "type": "string"
      },
      "VapusSvcs": {
        "default": "PLATFORM",
        "enum": [
          "PLATFORM",
          "AISTUDIO",
          "WEBAPP"
        ],
        "type": "string"
      },
      "VapusUser": {
        "properties": {
          "users": {
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "title": "@gotags: yaml:\"user\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "VdcMetadataResponse": {
        "properties": {
          "output": {
            "description": "@gotags: yaml:\"output\"",
            "items": {
              "$ref": "#/components/schemas/vapusdata.v1alpha1.VDCScheme"
            },
            "title": "Output VDC schemes",
            "type": "array"
          }
        },
        "type": "object"
      },
      "VectorEmbeddings": {
        "properties": {
          "vectors": {
            "items": {
              "format": "float",
              "type": "number"
            },
            "title": "@gotags: yaml:\"vectors\"",
            "type": "array"
          }
        },
        "type": "object"
      },
      "VersionBumpType": {
        "default": "INVALID_BUMP_TYPE",
        "enum": [
          "INVALID_BUMP_TYPE",
          "PATCH",
          "MINOR",
          "MAJOR"
        ],
        "type": "string"
      },
      "WorkerEngine": {
        "properties": {
          "extracter": {
            "items": {
              "$ref": "#/components/schemas/ExtractionRule"
            },
            "title": "@gotags: yaml:\"extracter\"",
            "type": "array"
          },
          "finalLoader": {
            "items": {
              "$ref": "#/components/schemas/LoadingRule"
            },
            "title": "@gotags: yaml:\"finalLoader\"",
            "type": "array"
          },
          "label": {
            "title": "@gotags: yaml:\"label\"",
            "type": "string"
          },
          "loader": {
            "items": {
              "$ref": "#/components/schemas/LoadingRule"
            },
            "title": "@gotags: yaml:\"loader\"",
            "type": "array"
          },
          "name": {
            "title": "@gotags: yaml:\"name\"",
            "type": "string"
          },
          "transformers": {
            "$ref": "#/components/schemas/Transformer"
          }
        },
        "type": "object"
      },
      "WorkerK8SDeploymentSpec": {
        "properties": {
          "configName": {
            "title": "@gotags: yaml:\"configName\"",
            "type": "string"
          },
          "jobName": {
            "title": "@gotags: yaml:\"jobName\"",
            "type": "string"
          },
          "lastDeploymentId": {
            "title": "@gotags: yaml:\"lastDeploymentId\"",
            "type": "string"
          },
          "lastRun": {
            "format": "int64",
            "title": "@gotags: yaml:\"lastRun\"",
            "type": "string"
          },
          "port": {
            "format": "int64",
            "title": "@gotags: yaml:\"port\"",
            "type": "string"
          },
          "schedule": {
            "$ref": "#/components/schemas/SyncSchedule"
          },
          "secretName": {
            "title": "@gotags: yaml:\"secretName\"",
            "type": "string"
          },
          "syncSchedule": {
            "$ref": "#/components/schemas/SyncSchedule"
          },
          "totalRuns": {
            "format": "int64",
            "title": "@gotags: yaml:\"totalRuns\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1alpha1.AIModelNodeResponse": {
        "properties": {
          "dmResp": {
            "$ref": "#/components/schemas/DMResponse"
          },
          "output": {
            "$ref": "#/components/schemas/AIModelNodeResponse.AIModelNodeResponse"
          }
        },
        "type": "object"
      },
      "vapuscontainer.v1alpha1.ApiQueryParams": {
        "properties": {
          "columns": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"columns\"",
            "type": "array"
          },
          "dataTables": {
            "items": {
              "type": "string"
            },
            "title": "@gotags: yaml:\"dataTables\"",
            "type": "array"
          },
          "filters": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"filters\"",
            "type": "array"
          },
          "limit": {
            "format": "int64",
            "title": "@gotags: yaml:\"limit\"",
            "type": "string"
          },
          "orderBy": {
            "$ref": "#/components/schemas/OrderBys"
          },
          "orderField": {
            "title": "@gotags: yaml:\"orderField\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vapuscontainer.v1alpha1.QueryResponse": {
        "properties": {
          "body": {
            "items": {
              "type": "object"
            },
            "title": "@gotags: yaml:\"body\"",
            "type": "array"
          },
          "metadata": {
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "@gotags: yaml:\"metadata\"",
            "type": "array"
          },
          "streamBody": {
            "title": "@gotags: yaml:\"streamBody\"",
            "type": "object"
          }
        },
        "type": "object"
      },
      "vapuscontainer.v1alpha1.ReaderQuery": {
        "properties": {
          "apiQueryParam": {
            "$ref": "#/components/schemas/vapuscontainer.v1alpha1.ApiQueryParams"
          },
          "dataproducts": {
            "title": "@gotags: yaml:\"dataproducts\"",
            "type": "string"
          },
          "rawQuery": {
            "title": "@gotags: yaml:\"rawQuery\"",
            "type": "string"
          },
          "textQuery": {
            "title": "@gotags: yaml:\"textQuery\"",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vapusdata.v1alpha1.ApiQueryParams": {
        "properties": {
          "columns": {
            "description": "@gotags: yaml:\"columns\"",
            "items": {
              "type": "string"
            },
            "title": "Columns",
            "type": "array"
          },
          "dataTables": {
            "description": "@gotags: yaml:\"dataTables\"",
            "items": {
              "type": "string"
            },
            "title": "Data tables",
            "type": "array"
          },
          "filters": {
            "description": "@gotags: yaml:\"filters\"",
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "Filters",
            "type": "array"
          },
          "limit": {
            "description": "@gotags: yaml:\"limit\"",
            "format": "int64",
            "title": "Limit",
            "type": "integer"
          },
          "orderBy": {
            "$ref": "#/components/schemas/OrderBys"
          },
          "orderField": {
            "description": "@gotags: yaml:\"orderField\"",
            "title": "Order field",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vapusdata.v1alpha1.QueryResponse": {
        "properties": {
          "body": {
            "description": "@gotags: yaml:\"body\"",
            "items": {
              "type": "object"
            },
            "title": "Body",
            "type": "array"
          },
          "metadata": {
            "description": "@gotags: yaml:\"metadata\"",
            "items": {
              "$ref": "#/components/schemas/Mapper"
            },
            "title": "Metadata",
            "type": "array"
          },
          "streamBody": {
            "description": "@gotags: yaml:\"streamBody\"",
            "title": "Stream body",
            "type": "object"
          }
        },
        "type": "object"
      },
      "vapusdata.v1alpha1.ReaderQuery": {
        "properties": {
          "apiQueryParam": {
            "$ref": "#/components/schemas/vapusdata.v1alpha1.ApiQueryParams"
          },
          "dataproducts": {
            "description": "@gotags: yaml:\"dataproducts\"",
            "title": "DataProducts with comma separated",
            "type": "string"
          },
          "rawQuery": {
            "description": "@gotags: yaml:\"rawQuery\"",
            "title": "Raw query",
            "type": "string"
          },
          "textQuery": {
            "description": "@gotags: yaml:\"textQuery\"",
            "title": "Text query",
            "type": "string"
          }
        },
        "type": "object"
      },
      "vapusdata.v1alpha1.VDCScheme": {
        "properties": {
          "dataSource": {
            "description": "@gotags: yaml:\"dataSource\"",
            "title": "Data source",
            "type": "string"
          },
          "dataTables": {
            "description": "@gotags: yaml:\"dataTables\"",
            "items": {
              "type": "string"
            },
            "title": "Data tables",
            "type": "array"
          },
          "dataproduct": {
            "description": "@gotags: yaml:\"dataproduct\"",
            "title": "DataProduct ID",
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "title": "protos/models/v1alpha1/enums.proto",
    "version": "version not set"
  },
  "openapi": "3.0.3",
  "paths": {
    "/api/v1alpha1/aistudio/ask": {
      "post": {
        "operationId": "VapusAIStudio_AIModelNodeInterface",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIModelNodeInterfaceRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIModelNodeInterfaceResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {AIModelNodeInterfaceRequest} request - The request object containing the AI model node interface.\n@returns {AIModelNodeInterfaceResponse} The response object containing the AI model node interface.",
        "tags": [
          "VapusAIStudio"
        ]
      }
    },
    "/api/v1alpha1/aistudio/models/nodes": {
      "get": {
        "operationId": "VapusAIStudio_ModelNodeGetter",
        "parameters": [
          {
            "description": "@gotags: yaml:\"aiModelNodeId\"",
            "in": "query",
            "name": "aiModelNodeId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1alpha1.AIModelNodeResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {AIModelNodeGetterRequest} request - The request object containing the AI model node getter.\n@returns {AIModelNodeResponse} The response object containing the AI model node getter.",
        "tags": [
          "VapusAIStudio"
        ]
      },
      "post": {
        "operationId": "VapusAIStudio_ModelNodeConfigurator",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AIModelNodeConfiguratorRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1alpha1.AIModelNodeResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {AIModelNodeConfiguratorRequest} request - The request object containing the AI model node configurator.\n@returns {AIModelNodeResponse} The response object containing the AI model node configurator.",
        "tags": [
          "VapusAIStudio"
        ]
      }
    },
    "/api/v1alpha1/aistudio/prompts": {
      "post": {
        "operationId": "VapusAIStudio_ModelPromptManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelPromptManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModelPromptManagerResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {ModelPromptManagerRequest} request - The request object containing the model prompt manager.\n@returns {ModelPromptManagerResponse} The response object containing the model prompt manager.",
        "tags": [
          "VapusAIStudio"
        ]
      }
    },
    "/api/v1alpha1/platform/accounts": {
      "post": {
        "operationId": "PlatformService_AccountManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountManagerRequest"
              }
            }
          },
          "description": "*\nThe AccountManagerRequest message contains the information required to create or retrieve an account.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nCreates a new account with the specified name.\n@param {AccountManager} request - The account creation request.\n@returns {AccountResponse} - The account creation response.",
        "tags": [
          "PlatformService"
        ]
      }
    },
    "/api/v1alpha1/platform/auth": {
      "post": {
        "operationId": "UserManagementService_AccessTokenInterface",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccessTokenInterfaceRequest"
              }
            }
          },
          "description": "*\nRepresents a request to generate a platform access token.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nGenerates a access token for the given user.\n@param {AccessTokenInterfaceRequest} request - The request object.\n@returns {AccessTokenResponse} The response object.",
        "tags": [
          "UserManagementService"
        ]
      }
    },
    "/api/v1alpha1/platform/authz": {
      "get": {
        "operationId": "UserManagementService_AuthzGetter",
        "parameters": [
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"roleArn\"",
            "in": "query",
            "name": "roleArn",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves authorization information.\n@param {AuthzGetterRequest} request - The request object.\n@returns {AuthzResponse} The response object.",
        "tags": [
          "UserManagementService"
        ]
      },
      "post": {
        "operationId": "UserManagementService_AuthzManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthzManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthzResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages authorization operations.\n@param {AuthzManagerRequest} request - The request object.\n@returns {AuthzResponse} The response object.",
        "tags": [
          "UserManagementService"
        ]
      }
    },
    "/api/v1alpha1/platform/compliances": {
      "get": {
        "operationId": "PlatformService_DataComplianceGetter",
        "parameters": [
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"principleId\"",
            "in": "query",
            "name": "principleId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataComplianceResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data compliance.\n@param {DataComplianceGetterRequest} request - The request object containing the data compliance ID.\n@returns {DataComplianceResponse} - The response object containing the retrieved data compliance.",
        "tags": [
          "PlatformService"
        ]
      },
      "post": {
        "operationId": "PlatformService_DataComplianceManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataComplianceManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataComplianceResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nCreates a new data compliance with the specified file format.\n@param {DataComplianceManagerRequest} request - The data compliance creation request.\n@returns {DataComplianceResponse} - The data compliance creation response.",
        "tags": [
          "PlatformService"
        ]
      }
    },
    "/api/v1alpha1/platform/datacatalogs": {
      "post": {
        "operationId": "PlatformService_DataCatalogManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCatalogManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCatalogResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nCreates a new data catalog with the specified name and display name.\n@param {DataCatalogManagerRequest} request - The data catalog creation request.\n@returns {DataCatalogResponse} - The data catalog creation response.",
        "tags": [
          "PlatformService"
        ]
      }
    },
    "/api/v1alpha1/platform/datamesh": {
      "get": {
        "operationId": "PlatformService_DataMeshGetter",
        "parameters": [
          {
            "description": "@gotags: yaml:\"meshId\"",
            "in": "query",
            "name": "meshId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"actions\"",
            "in": "query",
            "name": "actions",
            "schema": {
              "default": "INVALID_DATAMESH_ACTION",
              "enum": [
                "INVALID_DATAMESH_ACTION",
                "CONFIGURE_DATAMESH",
                "LIST_DATAMESH",
                "LIST_DATAMESH_CATALOGS",
                "LIST_DATAMESH_DATAPRODUCTS",
                "LIST_ACCESSIBLE_DATAPRODUCTS",
                "LIST_CATALOG_DATAPRODUCTS",
                "ACCESS_DATAPRODUCT",
                "DESCRIBE_DATAMESH_PRODUCT"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataMeshResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {DataWorkerDeploymentGetterRequest} request - The request object containing the data worker deployment ID.\n@returns {DataWorkerDeploymentResponse} The response object containing the retrieved data worker deployment.",
        "tags": [
          "PlatformService"
        ]
      },
      "post": {
        "operationId": "PlatformService_DataMeshManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataMeshManagerRequest"
              }
            }
          },
          "description": "*\nThe DataMeshManagerRequest message contains the information required to manage a data mesh.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataMeshResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nCreates a new data mesh with the specified name and display name.\n@param {DataMeshManagerRequest} request - The data mesh creation request.\n@returns {DataMeshResponse} - The data mesh creation response.",
        "tags": [
          "PlatformService"
        ]
      }
    },
    "/api/v1alpha1/platform/dataproduct-server": {
      "post": {
        "operationId": "DomainService_DataProductServer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProductServerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProductServerResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages a data product server.\n@param {DataProductServerRequest} request - The request object containing the data product ID and query.\n@returns {DataProductServerResponse} The response object containing the result of the data product server management actions.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/dataproducts": {
      "post": {
        "operationId": "DomainService_DataProductManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProductManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProductsResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages the data products.\n@param {DataProductManagerRequest} request - The request object containing the data product details.\n@returns {DataProductsResponse} The response object containing the result of the data product management actions.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/dataproducts/dry-run": {
      "post": {
        "operationId": "DomainService_DataProductDryRun",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProductDryRunRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Status"
                    },
                    "result": {
                      "$ref": "#/components/schemas/DataProductDryRunResponse"
                    }
                  },
                  "title": "Stream result of DataProductDryRunResponse",
                  "type": "object"
                }
              }
            },
            "description": "A successful response.(streaming responses)"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nPerforms a dry run of a data product.\n@param {DataProductDryRunRequest} request - The request object containing the data product and input query.\n@returns {DataProductDryRunResponse} The response object containing the result of the data product dry run.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/dataproducts/{dataProductId}": {
      "get": {
        "operationId": "DomainService_DataProductGetter",
        "parameters": [
          {
            "in": "path",
            "name": "dataProductId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProductsResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data product.\n@param {DataProductGetterRequest} request - The request object containing the data product ID.\n@returns {DataProductsResponse} The response object containing the retrieved data product.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/datasource-metadata": {
      "get": {
        "operationId": "DomainService_DataSourceMetadataGetter",
        "parameters": [
          {
            "in": "query",
            "name": "metadataId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceMetadataResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data source metadata.\n@param {DataSourceMetadataGetterRequest} request - The request object containing the data source metadata ID.\n@returns {DataSourceMetadataResponse} The response object containing the retrieved data source metadata.",
        "tags": [
          "DomainService"
        ]
      },
      "post": {
        "operationId": "DomainService_DataSourceMetadataManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceMetadataManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceMetadataResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages a data source metadata.\n@param {DataSourceMetadataManagerRequest} request - The request object containing the data source metadata details.\n@returns {DataSourceMetadataResponse} The response object containing the result of the data source metadata management actions.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/datasources": {
      "get": {
        "operationId": "DomainService_DataSourceGetter",
        "parameters": [
          {
            "description": "The data source ID to retrieve\n\n@gotags: yaml:\"dataSourceId\"",
            "in": "query",
            "name": "dataSourceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data source.\n@param {DataSourceGetterRequest} request - The request object containing the data source ID.\n@returns {DataSourceResponse} The response object containing the retrieved data source.",
        "tags": [
          "DomainService"
        ]
      },
      "post": {
        "operationId": "DomainService_DataSourceManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSourceManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages a data source.\n@param {DataSourceManagerRequest} request - The request object containing the data source details.\n@returns {DataSourcesResponse} The response object containing the result of the data source management actions.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/dataworkers": {
      "post": {
        "operationId": "DomainService_DataWorkerManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataWorkerManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataWorkerResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages a data worker.\n@param {DataWorkerManagerRequest} request - The request object containing the data worker details.\n@returns {DataWorkerResponse} The response object containing the result of the data worker management actions.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/dataworkers/deployments": {
      "get": {
        "operationId": "DomainService_DataWorkerDeploymentGetter",
        "parameters": [
          {
            "in": "query",
            "name": "deploymentId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataWorkerDeploymentResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {DataWorkerDeploymentGetterRequest} request - The request object containing the data worker deployment ID.\n@returns {DataWorkerDeploymentResponse} The response object containing the retrieved data worker deployment.",
        "tags": [
          "DomainService"
        ]
      },
      "post": {
        "operationId": "DomainService_DataWorkerDeploymentManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataWorkerDeploymentManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataWorkerDeploymentResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages a data worker deployment.\n@param {DataWorkerDeploymentManagerRequest} request - The request object containing the data worker deployment details.\n@returns {DataWorkerDeploymentResponse} The response object containing the result of the data worker deployment management actions.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/dataworkers/dry-run": {
      "post": {
        "operationId": "DomainService_DataWorkerDryRun",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataWorkerDryRunRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Status"
                    },
                    "result": {
                      "$ref": "#/components/schemas/DataWorkerDryRunResponse"
                    }
                  },
                  "title": "Stream result of DataWorkerDryRunResponse",
                  "type": "object"
                }
              }
            },
            "description": "A successful response.(streaming responses)"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nPerforms a dry run of a data worker.\n@param {DataWorkerDryRunRequest} request - The request object containing the data worker and input query.\n@returns {DataWorkerDryRunResponse} The response object containing the result of the data worker dry run.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/dataworkers/{dataWorkerId}": {
      "get": {
        "operationId": "DomainService_DataWorkerGetter",
        "parameters": [
          {
            "in": "path",
            "name": "dataWorkerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataWorkerResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker.\n@param {DataWorkerGetterRequest} request - The request object containing the data worker ID.\n@returns {DataWorkerResponse} The response object containing the retrieved data worker.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/domains": {
      "get": {
        "operationId": "DomainService_DomainGetter",
        "parameters": [
          {
            "description": "The domain ID to retrieve\n\n@gotags: yaml:\"domainId\"",
            "in": "query",
            "name": "domainId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a domain.\n@param {DomainGetterRequest} request - The request object containing the domain ID.\n@returns {DomainResponse} The response object containing the retrieved domain.",
        "tags": [
          "DomainService"
        ]
      },
      "post": {
        "operationId": "DomainService_DomainManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainManagerRequest"
              }
            }
          },
          "description": "*\n@typedef {Object} ManageDomainRequest\n@property {DomainAgentActions} actions - The actions to perform on the domain.\n@property {models.v1alpha1.Domain} spec - The request body containing the domain details.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages a domain.\n@param {DomainManagerRequest} request - The request object containing the domain details.\n@returns {DomainResponse} The response object containing the result of the domain management actions.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/login": {
      "post": {
        "operationId": "UserManagementService_LoginHandler",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmptyRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginHandlerResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nHandles login requests.\n@param {models.v1alpha1.EmptyRequest} request - The request object.\n@returns {LoginHandlerResponse} The response object.",
        "tags": [
          "UserManagementService"
        ]
      }
    },
    "/api/v1alpha1/platform/login/callback": {
      "post": {
        "operationId": "UserManagementService_LoginCallback",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCallBackRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nHandles login callbacks.\n@param {LoginCallBackRequest} request - The request object.\n@returns {AccessTokenResponse} The response object.",
        "tags": [
          "UserManagementService"
        ]
      }
    },
    "/api/v1alpha1/platform/observability": {
      "post": {
        "operationId": "DomainService_ObservabilityManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObservabilityManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObservabilityManagerResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages observability.\n@param {ObservabilityManagerRequest} request - The request object containing the observability details.\n@returns {ObservabilityManagerResponse} The response object containing the result of the observability management actions.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/platform/sample-resources": {
      "post": {
        "operationId": "PlatformService_GetSampleResourceConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SampleResourceConfigurationOptions"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SampleResourceConfiguration"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a sample resource configuration.\n@param {SampleResourceConfigurationOptions} request - The request object containing the sample resource configuration options.\n@returns {SampleResourceConfiguration} - The response object containing the sample resource configuration.",
        "tags": [
          "PlatformService"
        ]
      }
    },
    "/api/v1alpha1/platform/search": {
      "post": {
        "operationId": "PlatformService_VapusSearch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VapusSearchRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VapusSearchResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nsearch the dataproducts in data mesh.\n@param {GetDataProductsRequest} request - The data products query request.\n@returns {DataWorkers} - The data products retrieval response.",
        "tags": [
          "PlatformService"
        ]
      }
    },
    "/api/v1alpha1/platform/secrets": {
      "post": {
        "operationId": "PlatformService_StoreDMSecrets",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreDMSecretsRequest"
              }
            }
          },
          "description": "*\nThe StoreDMSecretsRequest message contains the information required to store data mesh secrets.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDMSecretsResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nStores the specified data mesh secrets.\n@param {StoreDMSecretsRequest} request - The data mesh secrets storage request.\n@returns {StoreDMSecretsResponse} - The data mesh secrets storage response.",
        "tags": [
          "PlatformService"
        ]
      }
    },
    "/api/v1alpha1/platform/services": {
      "post": {
        "operationId": "PlatformService_PlatformServicesInfo",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformServicesRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformServicesResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {DataWorkerDeploymentGetterRequest} request - The request object containing the data worker deployment ID.\n@returns {DataWorkerDeploymentResponse} The response object containing the retrieved data worker deployment.",
        "tags": [
          "PlatformService"
        ]
      }
    },
    "/api/v1alpha1/platform/users": {
      "get": {
        "operationId": "UserManagementService_UserGetter",
        "parameters": [
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"userId\"",
            "in": "query",
            "name": "userId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves user information.\n@param {UserGetterRequest} request - The request object.\n@returns {UserResponse} The response object.",
        "tags": [
          "UserManagementService"
        ]
      },
      "post": {
        "operationId": "UserManagementService_UserManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages user operations.\n@param {UserManagerRequest} request - The request object.\n@returns {UserResponse} The response object.",
        "tags": [
          "UserManagementService"
        ]
      }
    },
    "/api/v1alpha1/platform/vdc/deployments": {
      "get": {
        "operationId": "DomainService_VDCOrchestratorGetter",
        "parameters": [
          {
            "in": "query",
            "name": "deploymentId",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "@gotags: yaml:\"q\"",
            "in": "query",
            "name": "searchParam.q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VDCOrchestratorResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a VDC orchestrator.\n@param {VDCOrchestratorGetterRequest} request - The request object containing the VDC orchestrator ID.\n@returns {VDCOrchestratorResponse} The response object containing the retrieved VDC orchestrator.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/vapuscontainer": {
      "get": {
        "operationId": "VapusDataContainers_GetVapusDataContainer",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VapusDataContainer"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {models.v1alpha1.EmptyRequest} request - The request object.\n@returns {VapusDataContainer} The response object containing the data worker deployment.",
        "tags": [
          "VapusDataContainers"
        ]
      },
      "post": {
        "operationId": "VapusDataContainers_ManageStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManageStatusRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManageStatusResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {ManageStatusRequest} request - The request object containing the action to perform.\n@returns {ManageStatusResponse} The response object containing the status of the action.",
        "tags": [
          "VapusDataContainers"
        ]
      }
    },
    "/api/v1alpha1/vapuscontainer/query": {
      "post": {
        "operationId": "VapusDataContainers_Reader",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vapuscontainer.v1alpha1.ReaderQuery"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vapuscontainer.v1alpha1.QueryResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {ReaderQuery} request - The request object containing the query parameters.\n@returns {QueryResponse} The response object containing the query results.",
        "tags": [
          "VapusDataContainers"
        ]
      }
    },
    "/api/v1alpha1/vapuscontainer/query-stream": {
      "post": {
        "operationId": "VapusDataContainers_ReaderStream",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vapuscontainer.v1alpha1.ReaderQuery"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Status"
                    },
                    "result": {
                      "$ref": "#/components/schemas/vapuscontainer.v1alpha1.QueryResponse"
                    }
                  },
                  "title": "Stream result of vapuscontainer.v1alpha1.QueryResponse",
                  "type": "object"
                }
              }
            },
            "description": "A successful response.(streaming responses)"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {ReaderQuery} request - The request object containing the query parameters.\n@returns {stream QueryResponse} The response object containing the query results.",
        "tags": [
          "VapusDataContainers"
        ]
      }
    },
    "/api/v1alpha1/vapuscontainer/status": {
      "post": {
        "operationId": "VapusDataContainers_Configure",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigureRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VapusDataContainer"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {ConfigureRequest} request - The request object containing the configuration parameters.\n@returns {VapusDataContainer} The response object containing the configured data worker deployment.",
        "tags": [
          "VapusDataContainers"
        ]
      }
    },
    "/api/v1alpha1/vdc/platform/deployments": {
      "post": {
        "operationId": "DomainService_VDCOrchestratorManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VDCOrchestratorManagerRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VDCOrchestratorResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nManages a VDC orchestrator.\n@param {VDCOrchestratorManagerRequest} request - The request object containing the VDC orchestrator details.\n@returns {VDCOrchestratorResponse} The response object containing the result of the VDC orchestrator management actions.",
        "tags": [
          "DomainService"
        ]
      }
    },
    "/api/v1alpha1/vdcserver/configure": {
      "post": {
        "operationId": "DataProductServer_ConfigureProductServer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataProductConfigureRequest"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataProductConfigureResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nGRPC endpoint for configuring data products\nReturns a DataProductConfigureResponse\n@param {DataProductConfigureRequest} request - The request object containing the data product configure request.\n@returns {DataProductConfigureResponse} The DataProductConfigureResponse.",
        "tags": [
          "DataProductServer"
        ]
      }
    },
    "/api/v1alpha1/vdcserver/query": {
      "post": {
        "operationId": "DataProductServer_Reader",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vapusdata.v1alpha1.ReaderQuery"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vapusdata.v1alpha1.QueryResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nGRPC endpoint for single queries\nReturns a single QueryResponse\n@param {ReaderQuery} request - The request object containing the reader query.\n@returns {QueryResponse} The QueryResponse.",
        "tags": [
          "DataProductServer"
        ]
      }
    },
    "/api/v1alpha1/vdcserver/query-stream": {
      "post": {
        "operationId": "DataProductServer_ReaderStream",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vapusdata.v1alpha1.ReaderQuery"
              }
            }
          },
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/Status"
                    },
                    "result": {
                      "$ref": "#/components/schemas/vapusdata.v1alpha1.QueryResponse"
                    }
                  },
                  "title": "Stream result of vapusdata.v1alpha1.QueryResponse",
                  "type": "object"
                }
              }
            },
            "description": "A successful response.(streaming responses)"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nGRPC endpoint for streaming queries\nReturns a stream of QueryResponse\n@param {ReaderQuery} request - The request object containing the reader query.\n@returns {stream QueryResponse} The stream of QueryResponse.",
        "tags": [
          "DataProductServer"
        ]
      }
    },
    "/api/v1alpha1/vdcserver/schemes": {
      "get": {
        "operationId": "DataProductServer_GetVdcMetadata",
        "parameters": [
          {
            "description": "DataProduct ID\n\n@gotags: yaml:\"dataproduct\"",
            "in": "query",
            "name": "dataproduct",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VdcMetadataResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nGRPC endpoint for retrieving VDC metadata\nReturns a VdcMetadataResponse\n@param {VdcMetadataRequest} request - The request object containing the VDC metadata request.\n@returns {VdcMetadataResponse} The VdcMetadataResponse.",
        "tags": [
          "DataProductServer"
        ]
      }
    },
    "/vapusdata.v1alpha1.PlatformService/DiscoverSourceMetaData": {
      "post": {
        "operationId": "PlatformService_DiscoverSourceMetaData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoverSourceMetaDataRequest"
              }
            }
          },
          "description": "*\n@typedef DiscoverSourceMetaDataRequest\n@property {string} database - The name of the database.\n@property {string} table - The name of the table.\n@property {string} fields - The list of fields to retrieve.\n@property {domain} fields - The domain to retrieve.\n@property {string} q - The query string for searching metadata.",
          "required": true,
          "x-originalParamName": "body"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataSourceMetaDataResponse"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "*\nRetrieves a data worker deployment.\n@param {DataWorkerDeploymentGetterRequest} request - The request object containing the data worker deployment ID.\n@returns {DataWorkerDeploymentResponse} The response object containing the retrieved data worker deployment.",
        "tags": [
          "PlatformService"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "VapusDataContainers"
    },
    {
      "name": "VapusAIStudio"
    },
    {
      "name": "DataProductServer"
    },
    {
      "name": "DomainService"
    },
    {
      "name": "UserManagementService"
    },
    {
      "name": "PlatformService"
    }
  ]
}