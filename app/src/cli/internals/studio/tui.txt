func runStreamTUI() error {
    p := tea.NewProgram(model{})

    // Run the TUI in a separate goroutine
    go func() {
        client, err := NewMyGRPCClient()  // Set up your gRPC client here
        if err != nil {
            p.Send(err)
            return
        }

        stream, err := client.StreamData(context.Background(), &Request{})
        if err != nil {
            p.Send(err)
            return
        }

        for {
            resp, err := stream.Recv()
            if err == io.EOF {
                break
            }
            if err != nil {
                p.Send(err)
                return
            }

            // Send data to the TUI
            p.Send(resp.Data)  // Assuming resp.Data is a string
        }
    }()

    return p.Start()
}


type model struct {
    data   []string
    err    error
}

func (m model) Init() tea.Cmd {
    return nil
}

func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
    switch msg := msg.(type) {
    case tea.KeyMsg:
        if msg.String() == "q" {
            return m, tea.Quit
        }
    case string:
        m.data = append(m.data, msg)
    case error:
        m.err = msg
        return m, tea.Quit
    }
    return m, nil
}

func (m model) View() string {
    if m.err != nil {
        return fmt.Sprintf("Error: %v", m.err)
    }

    output := "Streaming data:\n\n"
    for _, d := range m.data {
        output += d + "\n"
    }
    output += "\nPress 'q' to quit.\n"
    return output
}
